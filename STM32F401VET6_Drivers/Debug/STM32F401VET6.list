
STM32F401VET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cc4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e58  08000e60  00010e60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000e58  08000e58  00010e60  2**0
                  CONTENTS
  4 .ARM          00000000  08000e58  08000e58  00010e60  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e58  08000e60  00010e60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e58  08000e58  00010e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e5c  08000e5c  00010e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010e60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000000  08000e60  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08000e60  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010e60  2**0
                  CONTENTS, READONLY
 12 .debug_info   000023bc  00000000  00000000  00010e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008cc  00000000  00000000  0001324c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002b0  00000000  00000000  00013b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000238  00000000  00000000  00013dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000079a  00000000  00000000  00014000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002b71  00000000  00000000  0001479a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000065fc  00000000  00000000  0001730b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001d907  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000978  00000000  00000000  0001d958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000e40 	.word	0x08000e40

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000e40 	.word	0x08000e40

080001d4 <HTFT_vWrite_Command>:
 */

#include "HAL_TFT_Interface.h"

void HTFT_vWrite_Command(u8 Copy_u8Command)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
	/*Set Pin A0  to Low*/
	MGPIO_vWritePinData(TFT_A0_PORT, TFT_A0_PIN, LOW_STATE);
 80001de:	2200      	movs	r2, #0
 80001e0:	2101      	movs	r1, #1
 80001e2:	2000      	movs	r0, #0
 80001e4:	f000 fa28 	bl	8000638 <MGPIO_vWritePinData>
	/* Send Command over SPI*/
	MSPI1_u16TrasRes(Copy_u8Command);
 80001e8:	79fb      	ldrb	r3, [r7, #7]
 80001ea:	b29b      	uxth	r3, r3
 80001ec:	4618      	mov	r0, r3
 80001ee:	f000 fcdf 	bl	8000bb0 <MSPI1_u16TrasRes>
}
 80001f2:	bf00      	nop
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}

080001fa <HTFT_vWrite_Data>:

 void HTFT_vWrite_Data(u16 Copy_u8Data)
{
 80001fa:	b580      	push	{r7, lr}
 80001fc:	b082      	sub	sp, #8
 80001fe:	af00      	add	r7, sp, #0
 8000200:	4603      	mov	r3, r0
 8000202:	80fb      	strh	r3, [r7, #6]
	/*Set Pin A0  to High*/
	MGPIO_vWritePinData(TFT_A0_PORT, TFT_A0_PIN, HIGH_STATE);
 8000204:	2201      	movs	r2, #1
 8000206:	2101      	movs	r1, #1
 8000208:	2000      	movs	r0, #0
 800020a:	f000 fa15 	bl	8000638 <MGPIO_vWritePinData>
	/* Send Data over SPI*/
	MSPI1_u16TrasRes(Copy_u8Data);
 800020e:	88fb      	ldrh	r3, [r7, #6]
 8000210:	4618      	mov	r0, r3
 8000212:	f000 fccd 	bl	8000bb0 <MSPI1_u16TrasRes>
}
 8000216:	bf00      	nop
 8000218:	3708      	adds	r7, #8
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
	...

08000220 <HTFT_vInit>:

void HTFT_vInit(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	/* PIN Initialization */
	MGPIO_vSetPinMode(TFT_A0_PORT, TFT_A0_PIN, OUTPUT_MODE);  					/*A0*/
 8000224:	2201      	movs	r2, #1
 8000226:	2101      	movs	r1, #1
 8000228:	2000      	movs	r0, #0
 800022a:	f000 f8a3 	bl	8000374 <MGPIO_vSetPinMode>
	MGPIO_vSetPinOutputType(TFT_A0_PORT, TFT_A0_PIN, OUTPUT_PUSH_PULL_TYPE);
 800022e:	2200      	movs	r2, #0
 8000230:	2101      	movs	r1, #1
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f916 	bl	8000464 <MGPIO_vSetPinOutputType>
	MGPIO_vSetPinOutputSpeed(TFT_A0_PORT, TFT_A0_PIN, OUTPUT_LOW_SPEED);
 8000238:	2200      	movs	r2, #0
 800023a:	2101      	movs	r1, #1
 800023c:	2000      	movs	r0, #0
 800023e:	f000 f983 	bl	8000548 <MGPIO_vSetPinOutputSpeed>

	MGPIO_vSetPinMode(TFT_RST_PORT, TFT_RST_PIN, OUTPUT_MODE);			/*RESET*/
 8000242:	2201      	movs	r2, #1
 8000244:	2102      	movs	r1, #2
 8000246:	2000      	movs	r0, #0
 8000248:	f000 f894 	bl	8000374 <MGPIO_vSetPinMode>
	MGPIO_vSetPinOutputType(TFT_RST_PORT, TFT_RST_PIN, OUTPUT_PUSH_PULL_TYPE);
 800024c:	2200      	movs	r2, #0
 800024e:	2102      	movs	r1, #2
 8000250:	2000      	movs	r0, #0
 8000252:	f000 f907 	bl	8000464 <MGPIO_vSetPinOutputType>
	MGPIO_vSetPinOutputSpeed(TFT_RST_PORT, TFT_RST_PIN, OUTPUT_LOW_SPEED);
 8000256:	2200      	movs	r2, #0
 8000258:	2102      	movs	r1, #2
 800025a:	2000      	movs	r0, #0
 800025c:	f000 f974 	bl	8000548 <MGPIO_vSetPinOutputSpeed>

	MGPIO_vSetPinMode(TFT_CLK_PORT, TFT_CLK_PIN, ALTERNATE_FUNCTION_MODE);			/*CLK*/
 8000260:	2202      	movs	r2, #2
 8000262:	2105      	movs	r1, #5
 8000264:	2000      	movs	r0, #0
 8000266:	f000 f885 	bl	8000374 <MGPIO_vSetPinMode>
	MGPIO_vSetPinAltFun(TFT_CLK_PORT, TFT_CLK_PIN, ALTFUN_5);
 800026a:	2205      	movs	r2, #5
 800026c:	2105      	movs	r1, #5
 800026e:	2000      	movs	r0, #0
 8000270:	f000 fab6 	bl	80007e0 <MGPIO_vSetPinAltFun>
	MGPIO_vSetPinOutputType(TFT_CLK_PORT, TFT_CLK_PIN, OUTPUT_PUSH_PULL_TYPE);
 8000274:	2200      	movs	r2, #0
 8000276:	2105      	movs	r1, #5
 8000278:	2000      	movs	r0, #0
 800027a:	f000 f8f3 	bl	8000464 <MGPIO_vSetPinOutputType>
	MGPIO_vSetPinOutputSpeed(TFT_CLK_PORT, TFT_CLK_PIN, OUTPUT_MEDUIM_SPEED);
 800027e:	2201      	movs	r2, #1
 8000280:	2105      	movs	r1, #5
 8000282:	2000      	movs	r0, #0
 8000284:	f000 f960 	bl	8000548 <MGPIO_vSetPinOutputSpeed>

	MGPIO_vSetPinMode(TFT_MOSI_PORT, TFT_MOSI_PIN, ALTERNATE_FUNCTION_MODE);				/*MOSI*/
 8000288:	2202      	movs	r2, #2
 800028a:	2107      	movs	r1, #7
 800028c:	2000      	movs	r0, #0
 800028e:	f000 f871 	bl	8000374 <MGPIO_vSetPinMode>
	MGPIO_vSetPinAltFun(TFT_MOSI_PORT, TFT_MOSI_PIN, ALTFUN_5);
 8000292:	2205      	movs	r2, #5
 8000294:	2107      	movs	r1, #7
 8000296:	2000      	movs	r0, #0
 8000298:	f000 faa2 	bl	80007e0 <MGPIO_vSetPinAltFun>
	MGPIO_vSetPinOutputType(TFT_MOSI_PORT, TFT_MOSI_PIN, OUTPUT_PUSH_PULL_TYPE);
 800029c:	2200      	movs	r2, #0
 800029e:	2107      	movs	r1, #7
 80002a0:	2000      	movs	r0, #0
 80002a2:	f000 f8df 	bl	8000464 <MGPIO_vSetPinOutputType>
	MGPIO_vSetPinOutputSpeed(TFT_MOSI_PORT, TFT_MOSI_PIN, OUTPUT_MEDUIM_SPEED);
 80002a6:	2201      	movs	r2, #1
 80002a8:	2107      	movs	r1, #7
 80002aa:	2000      	movs	r0, #0
 80002ac:	f000 f94c 	bl	8000548 <MGPIO_vSetPinOutputSpeed>

	/*Reset Pulse*/
	MGPIO_vWritePinData(TFT_RST_PORT,TFT_RST_PIN, HIGH_STATE);
 80002b0:	2201      	movs	r2, #1
 80002b2:	2102      	movs	r1, #2
 80002b4:	2000      	movs	r0, #0
 80002b6:	f000 f9bf 	bl	8000638 <MGPIO_vWritePinData>
	MSTK_DelayMs(100);
 80002ba:	2064      	movs	r0, #100	; 0x64
 80002bc:	f000 fcd0 	bl	8000c60 <MSTK_DelayMs>
	//_delay_us(100);
	MGPIO_vWritePinData(TFT_RST_PORT,TFT_RST_PIN, LOW_STATE);
 80002c0:	2200      	movs	r2, #0
 80002c2:	2102      	movs	r1, #2
 80002c4:	2000      	movs	r0, #0
 80002c6:	f000 f9b7 	bl	8000638 <MGPIO_vWritePinData>
	//_delay_us(1);
	MSTK_DelayMs(1);
 80002ca:	2001      	movs	r0, #1
 80002cc:	f000 fcc8 	bl	8000c60 <MSTK_DelayMs>
	MGPIO_vWritePinData(TFT_RST_PORT,TFT_RST_PIN, HIGH_STATE);
 80002d0:	2201      	movs	r2, #1
 80002d2:	2102      	movs	r1, #2
 80002d4:	2000      	movs	r0, #0
 80002d6:	f000 f9af 	bl	8000638 <MGPIO_vWritePinData>
	//_delay_us(100);
	MSTK_DelayMs(100);
 80002da:	2064      	movs	r0, #100	; 0x64
 80002dc:	f000 fcc0 	bl	8000c60 <MSTK_DelayMs>
	MGPIO_vWritePinData(TFT_RST_PORT,TFT_RST_PIN, LOW_STATE);
 80002e0:	2200      	movs	r2, #0
 80002e2:	2102      	movs	r1, #2
 80002e4:	2000      	movs	r0, #0
 80002e6:	f000 f9a7 	bl	8000638 <MGPIO_vWritePinData>
	/* Wait 100 us */
	//_delay_us(100);
	MSTK_DelayMs(100);
 80002ea:	2064      	movs	r0, #100	; 0x64
 80002ec:	f000 fcb8 	bl	8000c60 <MSTK_DelayMs>
	MGPIO_vWritePinData(TFT_RST_PORT,TFT_RST_PIN, HIGH_STATE);
 80002f0:	2201      	movs	r2, #1
 80002f2:	2102      	movs	r1, #2
 80002f4:	2000      	movs	r0, #0
 80002f6:	f000 f99f 	bl	8000638 <MGPIO_vWritePinData>
	/* Wait 120 ms */
	//_delay_ms(120);
	MSTK_DelayMs(120000);
 80002fa:	480a      	ldr	r0, [pc, #40]	; (8000324 <HTFT_vInit+0x104>)
 80002fc:	f000 fcb0 	bl	8000c60 <MSTK_DelayMs>
	/* Sleep Out Command */
	HTFT_vWrite_Command(SLPOUT);
 8000300:	2011      	movs	r0, #17
 8000302:	f7ff ff67 	bl	80001d4 <HTFT_vWrite_Command>
	/* Wait 150 ms */
	//_delay_ms(150);
	MSTK_DelayMs(150000);
 8000306:	4808      	ldr	r0, [pc, #32]	; (8000328 <HTFT_vInit+0x108>)
 8000308:	f000 fcaa 	bl	8000c60 <MSTK_DelayMs>
	/* Enable Color Mode  */
	HTFT_vWrite_Command(COLMOD);
 800030c:	203a      	movs	r0, #58	; 0x3a
 800030e:	f7ff ff61 	bl	80001d4 <HTFT_vWrite_Command>
	/* Enable RGB565 Command Parameter*/
	HTFT_vWrite_Data(RGB565);
 8000312:	2005      	movs	r0, #5
 8000314:	f7ff ff71 	bl	80001fa <HTFT_vWrite_Data>
	/* Enable Display*/
	HTFT_vWrite_Command(DISON);
 8000318:	2029      	movs	r0, #41	; 0x29
 800031a:	f7ff ff5b 	bl	80001d4 <HTFT_vWrite_Command>
}
 800031e:	bf00      	nop
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	0001d4c0 	.word	0x0001d4c0
 8000328:	000249f0 	.word	0x000249f0

0800032c <EXTI0_IRQHandler>:
{
	EXTI0_CallBack=Ptr0;
}

 void EXTI0_IRQHandler(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	SET_BIT(EXTI->PR,0U);
 8000330:	4b05      	ldr	r3, [pc, #20]	; (8000348 <EXTI0_IRQHandler+0x1c>)
 8000332:	695b      	ldr	r3, [r3, #20]
 8000334:	4a04      	ldr	r2, [pc, #16]	; (8000348 <EXTI0_IRQHandler+0x1c>)
 8000336:	f043 0301 	orr.w	r3, r3, #1
 800033a:	6153      	str	r3, [r2, #20]
	EXTI0_CallBack();
 800033c:	4b03      	ldr	r3, [pc, #12]	; (800034c <EXTI0_IRQHandler+0x20>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4798      	blx	r3
}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	40013c00 	.word	0x40013c00
 800034c:	2000001c 	.word	0x2000001c

08000350 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	SET_BIT(EXTI->PR,0U);
 8000354:	4b05      	ldr	r3, [pc, #20]	; (800036c <EXTI1_IRQHandler+0x1c>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a04      	ldr	r2, [pc, #16]	; (800036c <EXTI1_IRQHandler+0x1c>)
 800035a:	f043 0301 	orr.w	r3, r3, #1
 800035e:	6153      	str	r3, [r2, #20]
	EXTI1_CallBack();
 8000360:	4b03      	ldr	r3, [pc, #12]	; (8000370 <EXTI1_IRQHandler+0x20>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4798      	blx	r3
}
 8000366:	bf00      	nop
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	40013c00 	.word	0x40013c00
 8000370:	20000020 	.word	0x20000020

08000374 <MGPIO_vSetPinMode>:
 */

#include "MCAL_GPIO_Interface.h"

void MGPIO_vSetPinMode(u8 PortName, u8 PinNum, u8 DirectionMode)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	71fb      	strb	r3, [r7, #7]
 800037e:	460b      	mov	r3, r1
 8000380:	71bb      	strb	r3, [r7, #6]
 8000382:	4613      	mov	r3, r2
 8000384:	717b      	strb	r3, [r7, #5]
	/* INPUT_MODE, OUTPUT_MODE, ALTERNATE_FUNCTION_MODE, ANALOG_MODE */
	switch(PortName)
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	2b05      	cmp	r3, #5
 800038a:	d857      	bhi.n	800043c <MGPIO_vSetPinMode+0xc8>
 800038c:	a201      	add	r2, pc, #4	; (adr r2, 8000394 <MGPIO_vSetPinMode+0x20>)
 800038e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000392:	bf00      	nop
 8000394:	080003ad 	.word	0x080003ad
 8000398:	080003c5 	.word	0x080003c5
 800039c:	080003dd 	.word	0x080003dd
 80003a0:	080003f5 	.word	0x080003f5
 80003a4:	0800040d 	.word	0x0800040d
 80003a8:	08000425 	.word	0x08000425
	{
	    //GIVE_BIT(GPIOA_SPTR->GPIO_MODER.RegisterAccess, 2U* PinNum, (u32)DirectionMode) ; break;
		case GPIOA_PORT :GPIOA_SPTR->GPIO_MODER.RegisterAccess |= (u32)(DirectionMode<<(2U* PinNum)) ; break;
 80003ac:	4b27      	ldr	r3, [pc, #156]	; (800044c <MGPIO_vSetPinMode+0xd8>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	7979      	ldrb	r1, [r7, #5]
 80003b2:	79ba      	ldrb	r2, [r7, #6]
 80003b4:	0052      	lsls	r2, r2, #1
 80003b6:	fa01 f202 	lsl.w	r2, r1, r2
 80003ba:	4611      	mov	r1, r2
 80003bc:	4a23      	ldr	r2, [pc, #140]	; (800044c <MGPIO_vSetPinMode+0xd8>)
 80003be:	430b      	orrs	r3, r1
 80003c0:	6013      	str	r3, [r2, #0]
 80003c2:	e03c      	b.n	800043e <MGPIO_vSetPinMode+0xca>
		case GPIOB_PORT :GPIOB_SPTR->GPIO_MODER.RegisterAccess |= (u32)(DirectionMode<<(2U* PinNum)) ; break;
 80003c4:	4b22      	ldr	r3, [pc, #136]	; (8000450 <MGPIO_vSetPinMode+0xdc>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	7979      	ldrb	r1, [r7, #5]
 80003ca:	79ba      	ldrb	r2, [r7, #6]
 80003cc:	0052      	lsls	r2, r2, #1
 80003ce:	fa01 f202 	lsl.w	r2, r1, r2
 80003d2:	4611      	mov	r1, r2
 80003d4:	4a1e      	ldr	r2, [pc, #120]	; (8000450 <MGPIO_vSetPinMode+0xdc>)
 80003d6:	430b      	orrs	r3, r1
 80003d8:	6013      	str	r3, [r2, #0]
 80003da:	e030      	b.n	800043e <MGPIO_vSetPinMode+0xca>
		case GPIOC_PORT :GPIOC_SPTR->GPIO_MODER.RegisterAccess |= (u32)(DirectionMode<<(2U* PinNum)) ; break;
 80003dc:	4b1d      	ldr	r3, [pc, #116]	; (8000454 <MGPIO_vSetPinMode+0xe0>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	7979      	ldrb	r1, [r7, #5]
 80003e2:	79ba      	ldrb	r2, [r7, #6]
 80003e4:	0052      	lsls	r2, r2, #1
 80003e6:	fa01 f202 	lsl.w	r2, r1, r2
 80003ea:	4611      	mov	r1, r2
 80003ec:	4a19      	ldr	r2, [pc, #100]	; (8000454 <MGPIO_vSetPinMode+0xe0>)
 80003ee:	430b      	orrs	r3, r1
 80003f0:	6013      	str	r3, [r2, #0]
 80003f2:	e024      	b.n	800043e <MGPIO_vSetPinMode+0xca>
		case GPIOD_PORT :GPIOD_SPTR->GPIO_MODER.RegisterAccess |= (u32)(DirectionMode<<(2U* PinNum)) ; break;
 80003f4:	4b18      	ldr	r3, [pc, #96]	; (8000458 <MGPIO_vSetPinMode+0xe4>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	7979      	ldrb	r1, [r7, #5]
 80003fa:	79ba      	ldrb	r2, [r7, #6]
 80003fc:	0052      	lsls	r2, r2, #1
 80003fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000402:	4611      	mov	r1, r2
 8000404:	4a14      	ldr	r2, [pc, #80]	; (8000458 <MGPIO_vSetPinMode+0xe4>)
 8000406:	430b      	orrs	r3, r1
 8000408:	6013      	str	r3, [r2, #0]
 800040a:	e018      	b.n	800043e <MGPIO_vSetPinMode+0xca>
		case GPIOE_PORT :GPIOE_SPTR->GPIO_MODER.RegisterAccess |= (u32)(DirectionMode<<(2U* PinNum)) ; break;
 800040c:	4b13      	ldr	r3, [pc, #76]	; (800045c <MGPIO_vSetPinMode+0xe8>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	7979      	ldrb	r1, [r7, #5]
 8000412:	79ba      	ldrb	r2, [r7, #6]
 8000414:	0052      	lsls	r2, r2, #1
 8000416:	fa01 f202 	lsl.w	r2, r1, r2
 800041a:	4611      	mov	r1, r2
 800041c:	4a0f      	ldr	r2, [pc, #60]	; (800045c <MGPIO_vSetPinMode+0xe8>)
 800041e:	430b      	orrs	r3, r1
 8000420:	6013      	str	r3, [r2, #0]
 8000422:	e00c      	b.n	800043e <MGPIO_vSetPinMode+0xca>
		case GPIOH_PORT :GPIOH_SPTR->GPIO_MODER.RegisterAccess |= (u32)(DirectionMode<<(2U* PinNum)) ; break;
 8000424:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <MGPIO_vSetPinMode+0xec>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	7979      	ldrb	r1, [r7, #5]
 800042a:	79ba      	ldrb	r2, [r7, #6]
 800042c:	0052      	lsls	r2, r2, #1
 800042e:	fa01 f202 	lsl.w	r2, r1, r2
 8000432:	4611      	mov	r1, r2
 8000434:	4a0a      	ldr	r2, [pc, #40]	; (8000460 <MGPIO_vSetPinMode+0xec>)
 8000436:	430b      	orrs	r3, r1
 8000438:	6013      	str	r3, [r2, #0]
 800043a:	e000      	b.n	800043e <MGPIO_vSetPinMode+0xca>
		default : /*ERROR*/ break ;
 800043c:	bf00      	nop
    }
}
 800043e:	bf00      	nop
 8000440:	370c      	adds	r7, #12
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	40020000 	.word	0x40020000
 8000450:	40020400 	.word	0x40020400
 8000454:	40020800 	.word	0x40020800
 8000458:	40020c00 	.word	0x40020c00
 800045c:	40021000 	.word	0x40021000
 8000460:	40021c00 	.word	0x40021c00

08000464 <MGPIO_vSetPinOutputType>:
		default : /*ERROR*/ break ;
    }
}

void MGPIO_vSetPinOutputType(u8 PortName, u8 PinNum, u8 OutPutType)
{
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	71fb      	strb	r3, [r7, #7]
 800046e:	460b      	mov	r3, r1
 8000470:	71bb      	strb	r3, [r7, #6]
 8000472:	4613      	mov	r3, r2
 8000474:	717b      	strb	r3, [r7, #5]
	/*OUTPUT_PUSH_PULL_TYPE, OUTPUT_OPEN_DRAIN_TYPE*/
	switch(PortName)
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	2b05      	cmp	r3, #5
 800047a:	d851      	bhi.n	8000520 <MGPIO_vSetPinOutputType+0xbc>
 800047c:	a201      	add	r2, pc, #4	; (adr r2, 8000484 <MGPIO_vSetPinOutputType+0x20>)
 800047e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000482:	bf00      	nop
 8000484:	0800049d 	.word	0x0800049d
 8000488:	080004b3 	.word	0x080004b3
 800048c:	080004c9 	.word	0x080004c9
 8000490:	080004df 	.word	0x080004df
 8000494:	080004f5 	.word	0x080004f5
 8000498:	0800050b 	.word	0x0800050b
	{
		case GPIOA_PORT :GPIOA_SPTR->GPIO_OTYPER.RegisterAccess |= (u32)(OutPutType<<(PinNum)) ; break;
 800049c:	4b24      	ldr	r3, [pc, #144]	; (8000530 <MGPIO_vSetPinOutputType+0xcc>)
 800049e:	685b      	ldr	r3, [r3, #4]
 80004a0:	7979      	ldrb	r1, [r7, #5]
 80004a2:	79ba      	ldrb	r2, [r7, #6]
 80004a4:	fa01 f202 	lsl.w	r2, r1, r2
 80004a8:	4611      	mov	r1, r2
 80004aa:	4a21      	ldr	r2, [pc, #132]	; (8000530 <MGPIO_vSetPinOutputType+0xcc>)
 80004ac:	430b      	orrs	r3, r1
 80004ae:	6053      	str	r3, [r2, #4]
 80004b0:	e037      	b.n	8000522 <MGPIO_vSetPinOutputType+0xbe>
		case GPIOB_PORT :GPIOB_SPTR->GPIO_OTYPER.RegisterAccess |= (u32)(OutPutType<<(PinNum)) ; break;
 80004b2:	4b20      	ldr	r3, [pc, #128]	; (8000534 <MGPIO_vSetPinOutputType+0xd0>)
 80004b4:	685b      	ldr	r3, [r3, #4]
 80004b6:	7979      	ldrb	r1, [r7, #5]
 80004b8:	79ba      	ldrb	r2, [r7, #6]
 80004ba:	fa01 f202 	lsl.w	r2, r1, r2
 80004be:	4611      	mov	r1, r2
 80004c0:	4a1c      	ldr	r2, [pc, #112]	; (8000534 <MGPIO_vSetPinOutputType+0xd0>)
 80004c2:	430b      	orrs	r3, r1
 80004c4:	6053      	str	r3, [r2, #4]
 80004c6:	e02c      	b.n	8000522 <MGPIO_vSetPinOutputType+0xbe>
		case GPIOC_PORT :GPIOC_SPTR->GPIO_OTYPER.RegisterAccess |= (u32)(OutPutType<<(PinNum)) ; break;
 80004c8:	4b1b      	ldr	r3, [pc, #108]	; (8000538 <MGPIO_vSetPinOutputType+0xd4>)
 80004ca:	685b      	ldr	r3, [r3, #4]
 80004cc:	7979      	ldrb	r1, [r7, #5]
 80004ce:	79ba      	ldrb	r2, [r7, #6]
 80004d0:	fa01 f202 	lsl.w	r2, r1, r2
 80004d4:	4611      	mov	r1, r2
 80004d6:	4a18      	ldr	r2, [pc, #96]	; (8000538 <MGPIO_vSetPinOutputType+0xd4>)
 80004d8:	430b      	orrs	r3, r1
 80004da:	6053      	str	r3, [r2, #4]
 80004dc:	e021      	b.n	8000522 <MGPIO_vSetPinOutputType+0xbe>
		case GPIOD_PORT :GPIOD_SPTR->GPIO_OTYPER.RegisterAccess |= (u32)(OutPutType<<(PinNum)) ; break;
 80004de:	4b17      	ldr	r3, [pc, #92]	; (800053c <MGPIO_vSetPinOutputType+0xd8>)
 80004e0:	685b      	ldr	r3, [r3, #4]
 80004e2:	7979      	ldrb	r1, [r7, #5]
 80004e4:	79ba      	ldrb	r2, [r7, #6]
 80004e6:	fa01 f202 	lsl.w	r2, r1, r2
 80004ea:	4611      	mov	r1, r2
 80004ec:	4a13      	ldr	r2, [pc, #76]	; (800053c <MGPIO_vSetPinOutputType+0xd8>)
 80004ee:	430b      	orrs	r3, r1
 80004f0:	6053      	str	r3, [r2, #4]
 80004f2:	e016      	b.n	8000522 <MGPIO_vSetPinOutputType+0xbe>
		case GPIOE_PORT :GPIOE_SPTR->GPIO_OTYPER.RegisterAccess |= (u32)(OutPutType<<(PinNum)) ; break;
 80004f4:	4b12      	ldr	r3, [pc, #72]	; (8000540 <MGPIO_vSetPinOutputType+0xdc>)
 80004f6:	685b      	ldr	r3, [r3, #4]
 80004f8:	7979      	ldrb	r1, [r7, #5]
 80004fa:	79ba      	ldrb	r2, [r7, #6]
 80004fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000500:	4611      	mov	r1, r2
 8000502:	4a0f      	ldr	r2, [pc, #60]	; (8000540 <MGPIO_vSetPinOutputType+0xdc>)
 8000504:	430b      	orrs	r3, r1
 8000506:	6053      	str	r3, [r2, #4]
 8000508:	e00b      	b.n	8000522 <MGPIO_vSetPinOutputType+0xbe>
		case GPIOH_PORT :GPIOH_SPTR->GPIO_OTYPER.RegisterAccess |= (u32)(OutPutType<<(PinNum)) ; break;
 800050a:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <MGPIO_vSetPinOutputType+0xe0>)
 800050c:	685b      	ldr	r3, [r3, #4]
 800050e:	7979      	ldrb	r1, [r7, #5]
 8000510:	79ba      	ldrb	r2, [r7, #6]
 8000512:	fa01 f202 	lsl.w	r2, r1, r2
 8000516:	4611      	mov	r1, r2
 8000518:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <MGPIO_vSetPinOutputType+0xe0>)
 800051a:	430b      	orrs	r3, r1
 800051c:	6053      	str	r3, [r2, #4]
 800051e:	e000      	b.n	8000522 <MGPIO_vSetPinOutputType+0xbe>
		default : /*ERROR*/ break ;
 8000520:	bf00      	nop
     }
}
 8000522:	bf00      	nop
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	40020000 	.word	0x40020000
 8000534:	40020400 	.word	0x40020400
 8000538:	40020800 	.word	0x40020800
 800053c:	40020c00 	.word	0x40020c00
 8000540:	40021000 	.word	0x40021000
 8000544:	40021c00 	.word	0x40021c00

08000548 <MGPIO_vSetPinOutputSpeed>:

void MGPIO_vSetPinOutputSpeed(u8 PortName, u8 PinNum, u8 OutputSpeed)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	71fb      	strb	r3, [r7, #7]
 8000552:	460b      	mov	r3, r1
 8000554:	71bb      	strb	r3, [r7, #6]
 8000556:	4613      	mov	r3, r2
 8000558:	717b      	strb	r3, [r7, #5]
	/*OUTPUT_LOW_SPEED, OUTPUT_MEDUIM_SPEED, OUTPUT_HIGH_SPEED, OUTPUT_VERY_HIGH_SPEED*/
	switch(PortName)
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	2b05      	cmp	r3, #5
 800055e:	d857      	bhi.n	8000610 <MGPIO_vSetPinOutputSpeed+0xc8>
 8000560:	a201      	add	r2, pc, #4	; (adr r2, 8000568 <MGPIO_vSetPinOutputSpeed+0x20>)
 8000562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000566:	bf00      	nop
 8000568:	08000581 	.word	0x08000581
 800056c:	08000599 	.word	0x08000599
 8000570:	080005b1 	.word	0x080005b1
 8000574:	080005c9 	.word	0x080005c9
 8000578:	080005e1 	.word	0x080005e1
 800057c:	080005f9 	.word	0x080005f9
	{
		case GPIOA_PORT :GPIOA_SPTR->GPIO_OSPEEDR.RegisterAccess |= (u32)(OutputSpeed<<(2U* PinNum)) ; break;
 8000580:	4b27      	ldr	r3, [pc, #156]	; (8000620 <MGPIO_vSetPinOutputSpeed+0xd8>)
 8000582:	689b      	ldr	r3, [r3, #8]
 8000584:	7979      	ldrb	r1, [r7, #5]
 8000586:	79ba      	ldrb	r2, [r7, #6]
 8000588:	0052      	lsls	r2, r2, #1
 800058a:	fa01 f202 	lsl.w	r2, r1, r2
 800058e:	4611      	mov	r1, r2
 8000590:	4a23      	ldr	r2, [pc, #140]	; (8000620 <MGPIO_vSetPinOutputSpeed+0xd8>)
 8000592:	430b      	orrs	r3, r1
 8000594:	6093      	str	r3, [r2, #8]
 8000596:	e03c      	b.n	8000612 <MGPIO_vSetPinOutputSpeed+0xca>
		case GPIOB_PORT :GPIOB_SPTR->GPIO_OSPEEDR.RegisterAccess |= (u32)(OutputSpeed<<(2U* PinNum)) ; break;
 8000598:	4b22      	ldr	r3, [pc, #136]	; (8000624 <MGPIO_vSetPinOutputSpeed+0xdc>)
 800059a:	689b      	ldr	r3, [r3, #8]
 800059c:	7979      	ldrb	r1, [r7, #5]
 800059e:	79ba      	ldrb	r2, [r7, #6]
 80005a0:	0052      	lsls	r2, r2, #1
 80005a2:	fa01 f202 	lsl.w	r2, r1, r2
 80005a6:	4611      	mov	r1, r2
 80005a8:	4a1e      	ldr	r2, [pc, #120]	; (8000624 <MGPIO_vSetPinOutputSpeed+0xdc>)
 80005aa:	430b      	orrs	r3, r1
 80005ac:	6093      	str	r3, [r2, #8]
 80005ae:	e030      	b.n	8000612 <MGPIO_vSetPinOutputSpeed+0xca>
		case GPIOC_PORT :GPIOC_SPTR->GPIO_OSPEEDR.RegisterAccess |= (u32)(OutputSpeed<<(2U* PinNum)) ; break;
 80005b0:	4b1d      	ldr	r3, [pc, #116]	; (8000628 <MGPIO_vSetPinOutputSpeed+0xe0>)
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	7979      	ldrb	r1, [r7, #5]
 80005b6:	79ba      	ldrb	r2, [r7, #6]
 80005b8:	0052      	lsls	r2, r2, #1
 80005ba:	fa01 f202 	lsl.w	r2, r1, r2
 80005be:	4611      	mov	r1, r2
 80005c0:	4a19      	ldr	r2, [pc, #100]	; (8000628 <MGPIO_vSetPinOutputSpeed+0xe0>)
 80005c2:	430b      	orrs	r3, r1
 80005c4:	6093      	str	r3, [r2, #8]
 80005c6:	e024      	b.n	8000612 <MGPIO_vSetPinOutputSpeed+0xca>
		case GPIOD_PORT :GPIOD_SPTR->GPIO_OSPEEDR.RegisterAccess |= (u32)(OutputSpeed<<(2U* PinNum)) ; break;
 80005c8:	4b18      	ldr	r3, [pc, #96]	; (800062c <MGPIO_vSetPinOutputSpeed+0xe4>)
 80005ca:	689b      	ldr	r3, [r3, #8]
 80005cc:	7979      	ldrb	r1, [r7, #5]
 80005ce:	79ba      	ldrb	r2, [r7, #6]
 80005d0:	0052      	lsls	r2, r2, #1
 80005d2:	fa01 f202 	lsl.w	r2, r1, r2
 80005d6:	4611      	mov	r1, r2
 80005d8:	4a14      	ldr	r2, [pc, #80]	; (800062c <MGPIO_vSetPinOutputSpeed+0xe4>)
 80005da:	430b      	orrs	r3, r1
 80005dc:	6093      	str	r3, [r2, #8]
 80005de:	e018      	b.n	8000612 <MGPIO_vSetPinOutputSpeed+0xca>
		case GPIOE_PORT :GPIOE_SPTR->GPIO_OSPEEDR.RegisterAccess |= (u32)(OutputSpeed<<(2U* PinNum)) ; break;
 80005e0:	4b13      	ldr	r3, [pc, #76]	; (8000630 <MGPIO_vSetPinOutputSpeed+0xe8>)
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	7979      	ldrb	r1, [r7, #5]
 80005e6:	79ba      	ldrb	r2, [r7, #6]
 80005e8:	0052      	lsls	r2, r2, #1
 80005ea:	fa01 f202 	lsl.w	r2, r1, r2
 80005ee:	4611      	mov	r1, r2
 80005f0:	4a0f      	ldr	r2, [pc, #60]	; (8000630 <MGPIO_vSetPinOutputSpeed+0xe8>)
 80005f2:	430b      	orrs	r3, r1
 80005f4:	6093      	str	r3, [r2, #8]
 80005f6:	e00c      	b.n	8000612 <MGPIO_vSetPinOutputSpeed+0xca>
		case GPIOH_PORT :GPIOH_SPTR->GPIO_OSPEEDR.RegisterAccess |= (u32)(OutputSpeed<<(2U* PinNum)) ; break;
 80005f8:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <MGPIO_vSetPinOutputSpeed+0xec>)
 80005fa:	689b      	ldr	r3, [r3, #8]
 80005fc:	7979      	ldrb	r1, [r7, #5]
 80005fe:	79ba      	ldrb	r2, [r7, #6]
 8000600:	0052      	lsls	r2, r2, #1
 8000602:	fa01 f202 	lsl.w	r2, r1, r2
 8000606:	4611      	mov	r1, r2
 8000608:	4a0a      	ldr	r2, [pc, #40]	; (8000634 <MGPIO_vSetPinOutputSpeed+0xec>)
 800060a:	430b      	orrs	r3, r1
 800060c:	6093      	str	r3, [r2, #8]
 800060e:	e000      	b.n	8000612 <MGPIO_vSetPinOutputSpeed+0xca>
		default : /*ERROR*/ break ;
 8000610:	bf00      	nop
	}
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	40020000 	.word	0x40020000
 8000624:	40020400 	.word	0x40020400
 8000628:	40020800 	.word	0x40020800
 800062c:	40020c00 	.word	0x40020c00
 8000630:	40021000 	.word	0x40021000
 8000634:	40021c00 	.word	0x40021c00

08000638 <MGPIO_vWritePinData>:
	}
	return L_u8Pin_Read_Data;
}

void MGPIO_vWritePinData(u8 PortName, u8 PinNum, u8 OutputState)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]
 8000642:	460b      	mov	r3, r1
 8000644:	71bb      	strb	r3, [r7, #6]
 8000646:	4613      	mov	r3, r2
 8000648:	717b      	strb	r3, [r7, #5]
	/*LOW_STATE, HIGH_STATE*/
	switch(OutputState)
 800064a:	797b      	ldrb	r3, [r7, #5]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d002      	beq.n	8000656 <MGPIO_vWritePinData+0x1e>
 8000650:	2b01      	cmp	r3, #1
 8000652:	d05d      	beq.n	8000710 <MGPIO_vWritePinData+0xd8>
				case GPIOE_PORT :SET_BIT(GPIOE_SPTR->GPIO_ODR.RegisterAccess, PinNum); ; break;
				case GPIOH_PORT :SET_BIT(GPIOH_SPTR->GPIO_ODR.RegisterAccess, PinNum); ; break;
				default : /*ERROR*/ break ;
			}
		break ;
		default : /*ERROR*/ break ;
 8000654:	e0b2      	b.n	80007bc <MGPIO_vWritePinData+0x184>
			switch(PortName)
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	2b05      	cmp	r3, #5
 800065a:	d857      	bhi.n	800070c <MGPIO_vWritePinData+0xd4>
 800065c:	a201      	add	r2, pc, #4	; (adr r2, 8000664 <MGPIO_vWritePinData+0x2c>)
 800065e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000662:	bf00      	nop
 8000664:	0800067d 	.word	0x0800067d
 8000668:	08000695 	.word	0x08000695
 800066c:	080006ad 	.word	0x080006ad
 8000670:	080006c5 	.word	0x080006c5
 8000674:	080006dd 	.word	0x080006dd
 8000678:	080006f5 	.word	0x080006f5
				case GPIOA_PORT :CLR_BIT(GPIOA_SPTR->GPIO_ODR.RegisterAccess, PinNum); break;
 800067c:	4b52      	ldr	r3, [pc, #328]	; (80007c8 <MGPIO_vWritePinData+0x190>)
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	79ba      	ldrb	r2, [r7, #6]
 8000682:	2101      	movs	r1, #1
 8000684:	fa01 f202 	lsl.w	r2, r1, r2
 8000688:	43d2      	mvns	r2, r2
 800068a:	4611      	mov	r1, r2
 800068c:	4a4e      	ldr	r2, [pc, #312]	; (80007c8 <MGPIO_vWritePinData+0x190>)
 800068e:	400b      	ands	r3, r1
 8000690:	6153      	str	r3, [r2, #20]
 8000692:	e03c      	b.n	800070e <MGPIO_vWritePinData+0xd6>
				case GPIOB_PORT :CLR_BIT(GPIOB_SPTR->GPIO_ODR.RegisterAccess, PinNum); break;
 8000694:	4b4d      	ldr	r3, [pc, #308]	; (80007cc <MGPIO_vWritePinData+0x194>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	79ba      	ldrb	r2, [r7, #6]
 800069a:	2101      	movs	r1, #1
 800069c:	fa01 f202 	lsl.w	r2, r1, r2
 80006a0:	43d2      	mvns	r2, r2
 80006a2:	4611      	mov	r1, r2
 80006a4:	4a49      	ldr	r2, [pc, #292]	; (80007cc <MGPIO_vWritePinData+0x194>)
 80006a6:	400b      	ands	r3, r1
 80006a8:	6153      	str	r3, [r2, #20]
 80006aa:	e030      	b.n	800070e <MGPIO_vWritePinData+0xd6>
				case GPIOC_PORT :CLR_BIT(GPIOC_SPTR->GPIO_ODR.RegisterAccess, PinNum); break;
 80006ac:	4b48      	ldr	r3, [pc, #288]	; (80007d0 <MGPIO_vWritePinData+0x198>)
 80006ae:	695b      	ldr	r3, [r3, #20]
 80006b0:	79ba      	ldrb	r2, [r7, #6]
 80006b2:	2101      	movs	r1, #1
 80006b4:	fa01 f202 	lsl.w	r2, r1, r2
 80006b8:	43d2      	mvns	r2, r2
 80006ba:	4611      	mov	r1, r2
 80006bc:	4a44      	ldr	r2, [pc, #272]	; (80007d0 <MGPIO_vWritePinData+0x198>)
 80006be:	400b      	ands	r3, r1
 80006c0:	6153      	str	r3, [r2, #20]
 80006c2:	e024      	b.n	800070e <MGPIO_vWritePinData+0xd6>
				case GPIOD_PORT :CLR_BIT(GPIOD_SPTR->GPIO_ODR.RegisterAccess, PinNum); break;
 80006c4:	4b43      	ldr	r3, [pc, #268]	; (80007d4 <MGPIO_vWritePinData+0x19c>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	79ba      	ldrb	r2, [r7, #6]
 80006ca:	2101      	movs	r1, #1
 80006cc:	fa01 f202 	lsl.w	r2, r1, r2
 80006d0:	43d2      	mvns	r2, r2
 80006d2:	4611      	mov	r1, r2
 80006d4:	4a3f      	ldr	r2, [pc, #252]	; (80007d4 <MGPIO_vWritePinData+0x19c>)
 80006d6:	400b      	ands	r3, r1
 80006d8:	6153      	str	r3, [r2, #20]
 80006da:	e018      	b.n	800070e <MGPIO_vWritePinData+0xd6>
				case GPIOE_PORT :CLR_BIT(GPIOE_SPTR->GPIO_ODR.RegisterAccess, PinNum); break;
 80006dc:	4b3e      	ldr	r3, [pc, #248]	; (80007d8 <MGPIO_vWritePinData+0x1a0>)
 80006de:	695b      	ldr	r3, [r3, #20]
 80006e0:	79ba      	ldrb	r2, [r7, #6]
 80006e2:	2101      	movs	r1, #1
 80006e4:	fa01 f202 	lsl.w	r2, r1, r2
 80006e8:	43d2      	mvns	r2, r2
 80006ea:	4611      	mov	r1, r2
 80006ec:	4a3a      	ldr	r2, [pc, #232]	; (80007d8 <MGPIO_vWritePinData+0x1a0>)
 80006ee:	400b      	ands	r3, r1
 80006f0:	6153      	str	r3, [r2, #20]
 80006f2:	e00c      	b.n	800070e <MGPIO_vWritePinData+0xd6>
				case GPIOH_PORT :CLR_BIT(GPIOH_SPTR->GPIO_ODR.RegisterAccess, PinNum); break;
 80006f4:	4b39      	ldr	r3, [pc, #228]	; (80007dc <MGPIO_vWritePinData+0x1a4>)
 80006f6:	695b      	ldr	r3, [r3, #20]
 80006f8:	79ba      	ldrb	r2, [r7, #6]
 80006fa:	2101      	movs	r1, #1
 80006fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000700:	43d2      	mvns	r2, r2
 8000702:	4611      	mov	r1, r2
 8000704:	4a35      	ldr	r2, [pc, #212]	; (80007dc <MGPIO_vWritePinData+0x1a4>)
 8000706:	400b      	ands	r3, r1
 8000708:	6153      	str	r3, [r2, #20]
 800070a:	e000      	b.n	800070e <MGPIO_vWritePinData+0xd6>
				default : /*ERROR*/ break ;
 800070c:	bf00      	nop
		break ;
 800070e:	e055      	b.n	80007bc <MGPIO_vWritePinData+0x184>
			switch(PortName)
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	2b05      	cmp	r3, #5
 8000714:	d850      	bhi.n	80007b8 <MGPIO_vWritePinData+0x180>
 8000716:	a201      	add	r2, pc, #4	; (adr r2, 800071c <MGPIO_vWritePinData+0xe4>)
 8000718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800071c:	08000735 	.word	0x08000735
 8000720:	0800074b 	.word	0x0800074b
 8000724:	08000761 	.word	0x08000761
 8000728:	08000777 	.word	0x08000777
 800072c:	0800078d 	.word	0x0800078d
 8000730:	080007a3 	.word	0x080007a3
				case GPIOA_PORT :SET_BIT(GPIOA_SPTR->GPIO_ODR.RegisterAccess, PinNum); ; break;
 8000734:	4b24      	ldr	r3, [pc, #144]	; (80007c8 <MGPIO_vWritePinData+0x190>)
 8000736:	695b      	ldr	r3, [r3, #20]
 8000738:	79ba      	ldrb	r2, [r7, #6]
 800073a:	2101      	movs	r1, #1
 800073c:	fa01 f202 	lsl.w	r2, r1, r2
 8000740:	4611      	mov	r1, r2
 8000742:	4a21      	ldr	r2, [pc, #132]	; (80007c8 <MGPIO_vWritePinData+0x190>)
 8000744:	430b      	orrs	r3, r1
 8000746:	6153      	str	r3, [r2, #20]
 8000748:	e037      	b.n	80007ba <MGPIO_vWritePinData+0x182>
				case GPIOB_PORT :SET_BIT(GPIOB_SPTR->GPIO_ODR.RegisterAccess, PinNum); ; break;
 800074a:	4b20      	ldr	r3, [pc, #128]	; (80007cc <MGPIO_vWritePinData+0x194>)
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	79ba      	ldrb	r2, [r7, #6]
 8000750:	2101      	movs	r1, #1
 8000752:	fa01 f202 	lsl.w	r2, r1, r2
 8000756:	4611      	mov	r1, r2
 8000758:	4a1c      	ldr	r2, [pc, #112]	; (80007cc <MGPIO_vWritePinData+0x194>)
 800075a:	430b      	orrs	r3, r1
 800075c:	6153      	str	r3, [r2, #20]
 800075e:	e02c      	b.n	80007ba <MGPIO_vWritePinData+0x182>
				case GPIOC_PORT :SET_BIT(GPIOC_SPTR->GPIO_ODR.RegisterAccess, PinNum); ; break;
 8000760:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <MGPIO_vWritePinData+0x198>)
 8000762:	695b      	ldr	r3, [r3, #20]
 8000764:	79ba      	ldrb	r2, [r7, #6]
 8000766:	2101      	movs	r1, #1
 8000768:	fa01 f202 	lsl.w	r2, r1, r2
 800076c:	4611      	mov	r1, r2
 800076e:	4a18      	ldr	r2, [pc, #96]	; (80007d0 <MGPIO_vWritePinData+0x198>)
 8000770:	430b      	orrs	r3, r1
 8000772:	6153      	str	r3, [r2, #20]
 8000774:	e021      	b.n	80007ba <MGPIO_vWritePinData+0x182>
				case GPIOD_PORT :SET_BIT(GPIOD_SPTR->GPIO_ODR.RegisterAccess, PinNum); ; break;
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <MGPIO_vWritePinData+0x19c>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	79ba      	ldrb	r2, [r7, #6]
 800077c:	2101      	movs	r1, #1
 800077e:	fa01 f202 	lsl.w	r2, r1, r2
 8000782:	4611      	mov	r1, r2
 8000784:	4a13      	ldr	r2, [pc, #76]	; (80007d4 <MGPIO_vWritePinData+0x19c>)
 8000786:	430b      	orrs	r3, r1
 8000788:	6153      	str	r3, [r2, #20]
 800078a:	e016      	b.n	80007ba <MGPIO_vWritePinData+0x182>
				case GPIOE_PORT :SET_BIT(GPIOE_SPTR->GPIO_ODR.RegisterAccess, PinNum); ; break;
 800078c:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <MGPIO_vWritePinData+0x1a0>)
 800078e:	695b      	ldr	r3, [r3, #20]
 8000790:	79ba      	ldrb	r2, [r7, #6]
 8000792:	2101      	movs	r1, #1
 8000794:	fa01 f202 	lsl.w	r2, r1, r2
 8000798:	4611      	mov	r1, r2
 800079a:	4a0f      	ldr	r2, [pc, #60]	; (80007d8 <MGPIO_vWritePinData+0x1a0>)
 800079c:	430b      	orrs	r3, r1
 800079e:	6153      	str	r3, [r2, #20]
 80007a0:	e00b      	b.n	80007ba <MGPIO_vWritePinData+0x182>
				case GPIOH_PORT :SET_BIT(GPIOH_SPTR->GPIO_ODR.RegisterAccess, PinNum); ; break;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MGPIO_vWritePinData+0x1a4>)
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	79ba      	ldrb	r2, [r7, #6]
 80007a8:	2101      	movs	r1, #1
 80007aa:	fa01 f202 	lsl.w	r2, r1, r2
 80007ae:	4611      	mov	r1, r2
 80007b0:	4a0a      	ldr	r2, [pc, #40]	; (80007dc <MGPIO_vWritePinData+0x1a4>)
 80007b2:	430b      	orrs	r3, r1
 80007b4:	6153      	str	r3, [r2, #20]
 80007b6:	e000      	b.n	80007ba <MGPIO_vWritePinData+0x182>
				default : /*ERROR*/ break ;
 80007b8:	bf00      	nop
		break ;
 80007ba:	bf00      	nop
	}
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	40020000 	.word	0x40020000
 80007cc:	40020400 	.word	0x40020400
 80007d0:	40020800 	.word	0x40020800
 80007d4:	40020c00 	.word	0x40020c00
 80007d8:	40021000 	.word	0x40021000
 80007dc:	40021c00 	.word	0x40021c00

080007e0 <MGPIO_vSetPinAltFun>:
		default : /*ERROR*/ break ;
	}
}

void MGPIO_vSetPinAltFun(u8 PortName, u8 PinNum, u8 ALTFUN )
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
 80007ea:	460b      	mov	r3, r1
 80007ec:	71bb      	strb	r3, [r7, #6]
 80007ee:	4613      	mov	r3, r2
 80007f0:	717b      	strb	r3, [r7, #5]
	if(PinNum <=7U)
 80007f2:	79bb      	ldrb	r3, [r7, #6]
 80007f4:	2b07      	cmp	r3, #7
 80007f6:	d85b      	bhi.n	80008b0 <MGPIO_vSetPinAltFun+0xd0>
	{
		switch(PortName)
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	2b05      	cmp	r3, #5
 80007fc:	f200 80b6 	bhi.w	800096c <MGPIO_vSetPinAltFun+0x18c>
 8000800:	a201      	add	r2, pc, #4	; (adr r2, 8000808 <MGPIO_vSetPinAltFun+0x28>)
 8000802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000806:	bf00      	nop
 8000808:	08000821 	.word	0x08000821
 800080c:	08000839 	.word	0x08000839
 8000810:	08000851 	.word	0x08000851
 8000814:	08000869 	.word	0x08000869
 8000818:	08000881 	.word	0x08000881
 800081c:	08000899 	.word	0x08000899
		{
			 case GPIOA_PORT  : GPIOA_SPTR->GPIO_AFRL.RegisterAccess |= (u32)(ALTFUN<<(4U*PinNum)) ; break ;
 8000820:	4b57      	ldr	r3, [pc, #348]	; (8000980 <MGPIO_vSetPinAltFun+0x1a0>)
 8000822:	6a1b      	ldr	r3, [r3, #32]
 8000824:	7979      	ldrb	r1, [r7, #5]
 8000826:	79ba      	ldrb	r2, [r7, #6]
 8000828:	0092      	lsls	r2, r2, #2
 800082a:	fa01 f202 	lsl.w	r2, r1, r2
 800082e:	4611      	mov	r1, r2
 8000830:	4a53      	ldr	r2, [pc, #332]	; (8000980 <MGPIO_vSetPinAltFun+0x1a0>)
 8000832:	430b      	orrs	r3, r1
 8000834:	6213      	str	r3, [r2, #32]
 8000836:	e09c      	b.n	8000972 <MGPIO_vSetPinAltFun+0x192>
			 case GPIOB_PORT  : GPIOB_SPTR->GPIO_AFRL.RegisterAccess |= (u32)(ALTFUN<<(4U*PinNum)) ; break ;
 8000838:	4b52      	ldr	r3, [pc, #328]	; (8000984 <MGPIO_vSetPinAltFun+0x1a4>)
 800083a:	6a1b      	ldr	r3, [r3, #32]
 800083c:	7979      	ldrb	r1, [r7, #5]
 800083e:	79ba      	ldrb	r2, [r7, #6]
 8000840:	0092      	lsls	r2, r2, #2
 8000842:	fa01 f202 	lsl.w	r2, r1, r2
 8000846:	4611      	mov	r1, r2
 8000848:	4a4e      	ldr	r2, [pc, #312]	; (8000984 <MGPIO_vSetPinAltFun+0x1a4>)
 800084a:	430b      	orrs	r3, r1
 800084c:	6213      	str	r3, [r2, #32]
 800084e:	e090      	b.n	8000972 <MGPIO_vSetPinAltFun+0x192>
			 case GPIOC_PORT  : GPIOC_SPTR->GPIO_AFRL.RegisterAccess |= (u32)(ALTFUN<<(4U*PinNum)) ; break ;
 8000850:	4b4d      	ldr	r3, [pc, #308]	; (8000988 <MGPIO_vSetPinAltFun+0x1a8>)
 8000852:	6a1b      	ldr	r3, [r3, #32]
 8000854:	7979      	ldrb	r1, [r7, #5]
 8000856:	79ba      	ldrb	r2, [r7, #6]
 8000858:	0092      	lsls	r2, r2, #2
 800085a:	fa01 f202 	lsl.w	r2, r1, r2
 800085e:	4611      	mov	r1, r2
 8000860:	4a49      	ldr	r2, [pc, #292]	; (8000988 <MGPIO_vSetPinAltFun+0x1a8>)
 8000862:	430b      	orrs	r3, r1
 8000864:	6213      	str	r3, [r2, #32]
 8000866:	e084      	b.n	8000972 <MGPIO_vSetPinAltFun+0x192>
			 case GPIOD_PORT  : GPIOD_SPTR->GPIO_AFRL.RegisterAccess |= (u32)(ALTFUN<<(4U*PinNum)) ; break ;
 8000868:	4b48      	ldr	r3, [pc, #288]	; (800098c <MGPIO_vSetPinAltFun+0x1ac>)
 800086a:	6a1b      	ldr	r3, [r3, #32]
 800086c:	7979      	ldrb	r1, [r7, #5]
 800086e:	79ba      	ldrb	r2, [r7, #6]
 8000870:	0092      	lsls	r2, r2, #2
 8000872:	fa01 f202 	lsl.w	r2, r1, r2
 8000876:	4611      	mov	r1, r2
 8000878:	4a44      	ldr	r2, [pc, #272]	; (800098c <MGPIO_vSetPinAltFun+0x1ac>)
 800087a:	430b      	orrs	r3, r1
 800087c:	6213      	str	r3, [r2, #32]
 800087e:	e078      	b.n	8000972 <MGPIO_vSetPinAltFun+0x192>
			 case GPIOE_PORT  : GPIOE_SPTR->GPIO_AFRL.RegisterAccess |= (u32)(ALTFUN<<(4U*PinNum)) ; break ;
 8000880:	4b43      	ldr	r3, [pc, #268]	; (8000990 <MGPIO_vSetPinAltFun+0x1b0>)
 8000882:	6a1b      	ldr	r3, [r3, #32]
 8000884:	7979      	ldrb	r1, [r7, #5]
 8000886:	79ba      	ldrb	r2, [r7, #6]
 8000888:	0092      	lsls	r2, r2, #2
 800088a:	fa01 f202 	lsl.w	r2, r1, r2
 800088e:	4611      	mov	r1, r2
 8000890:	4a3f      	ldr	r2, [pc, #252]	; (8000990 <MGPIO_vSetPinAltFun+0x1b0>)
 8000892:	430b      	orrs	r3, r1
 8000894:	6213      	str	r3, [r2, #32]
 8000896:	e06c      	b.n	8000972 <MGPIO_vSetPinAltFun+0x192>
			 case GPIOH_PORT  : GPIOH_SPTR->GPIO_AFRL.RegisterAccess |= (u32)(ALTFUN<<(4U*PinNum)) ; break ;
 8000898:	4b3e      	ldr	r3, [pc, #248]	; (8000994 <MGPIO_vSetPinAltFun+0x1b4>)
 800089a:	6a1b      	ldr	r3, [r3, #32]
 800089c:	7979      	ldrb	r1, [r7, #5]
 800089e:	79ba      	ldrb	r2, [r7, #6]
 80008a0:	0092      	lsls	r2, r2, #2
 80008a2:	fa01 f202 	lsl.w	r2, r1, r2
 80008a6:	4611      	mov	r1, r2
 80008a8:	4a3a      	ldr	r2, [pc, #232]	; (8000994 <MGPIO_vSetPinAltFun+0x1b4>)
 80008aa:	430b      	orrs	r3, r1
 80008ac:	6213      	str	r3, [r2, #32]
 80008ae:	e060      	b.n	8000972 <MGPIO_vSetPinAltFun+0x192>
			 default : /*ERROR*/ break ;
		}
	}
	else
	{
		PinNum %=8;
 80008b0:	79bb      	ldrb	r3, [r7, #6]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	71bb      	strb	r3, [r7, #6]
		switch(PortName)
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	2b05      	cmp	r3, #5
 80008bc:	d858      	bhi.n	8000970 <MGPIO_vSetPinAltFun+0x190>
 80008be:	a201      	add	r2, pc, #4	; (adr r2, 80008c4 <MGPIO_vSetPinAltFun+0xe4>)
 80008c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c4:	080008dd 	.word	0x080008dd
 80008c8:	080008f5 	.word	0x080008f5
 80008cc:	0800090d 	.word	0x0800090d
 80008d0:	08000925 	.word	0x08000925
 80008d4:	0800093d 	.word	0x0800093d
 80008d8:	08000955 	.word	0x08000955
		{
			 case GPIOA_PORT  : GPIOA_SPTR->GPIO_AFRH.RegisterAccess |= (u32)(ALTFUN<<(4U*PinNum)) ; break ;
 80008dc:	4b28      	ldr	r3, [pc, #160]	; (8000980 <MGPIO_vSetPinAltFun+0x1a0>)
 80008de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008e0:	7979      	ldrb	r1, [r7, #5]
 80008e2:	79ba      	ldrb	r2, [r7, #6]
 80008e4:	0092      	lsls	r2, r2, #2
 80008e6:	fa01 f202 	lsl.w	r2, r1, r2
 80008ea:	4611      	mov	r1, r2
 80008ec:	4a24      	ldr	r2, [pc, #144]	; (8000980 <MGPIO_vSetPinAltFun+0x1a0>)
 80008ee:	430b      	orrs	r3, r1
 80008f0:	6253      	str	r3, [r2, #36]	; 0x24
 80008f2:	e03e      	b.n	8000972 <MGPIO_vSetPinAltFun+0x192>
			 case GPIOB_PORT  : GPIOB_SPTR->GPIO_AFRH.RegisterAccess |= (u32)(ALTFUN<<(4U*PinNum)) ; break ;
 80008f4:	4b23      	ldr	r3, [pc, #140]	; (8000984 <MGPIO_vSetPinAltFun+0x1a4>)
 80008f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008f8:	7979      	ldrb	r1, [r7, #5]
 80008fa:	79ba      	ldrb	r2, [r7, #6]
 80008fc:	0092      	lsls	r2, r2, #2
 80008fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000902:	4611      	mov	r1, r2
 8000904:	4a1f      	ldr	r2, [pc, #124]	; (8000984 <MGPIO_vSetPinAltFun+0x1a4>)
 8000906:	430b      	orrs	r3, r1
 8000908:	6253      	str	r3, [r2, #36]	; 0x24
 800090a:	e032      	b.n	8000972 <MGPIO_vSetPinAltFun+0x192>
			 case GPIOC_PORT  : GPIOC_SPTR->GPIO_AFRH.RegisterAccess |= (u32)(ALTFUN<<(4U*PinNum)) ; break ;
 800090c:	4b1e      	ldr	r3, [pc, #120]	; (8000988 <MGPIO_vSetPinAltFun+0x1a8>)
 800090e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000910:	7979      	ldrb	r1, [r7, #5]
 8000912:	79ba      	ldrb	r2, [r7, #6]
 8000914:	0092      	lsls	r2, r2, #2
 8000916:	fa01 f202 	lsl.w	r2, r1, r2
 800091a:	4611      	mov	r1, r2
 800091c:	4a1a      	ldr	r2, [pc, #104]	; (8000988 <MGPIO_vSetPinAltFun+0x1a8>)
 800091e:	430b      	orrs	r3, r1
 8000920:	6253      	str	r3, [r2, #36]	; 0x24
 8000922:	e026      	b.n	8000972 <MGPIO_vSetPinAltFun+0x192>
			 case GPIOD_PORT  : GPIOD_SPTR->GPIO_AFRH.RegisterAccess |= (u32)(ALTFUN<<(4U*PinNum)) ; break ;
 8000924:	4b19      	ldr	r3, [pc, #100]	; (800098c <MGPIO_vSetPinAltFun+0x1ac>)
 8000926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000928:	7979      	ldrb	r1, [r7, #5]
 800092a:	79ba      	ldrb	r2, [r7, #6]
 800092c:	0092      	lsls	r2, r2, #2
 800092e:	fa01 f202 	lsl.w	r2, r1, r2
 8000932:	4611      	mov	r1, r2
 8000934:	4a15      	ldr	r2, [pc, #84]	; (800098c <MGPIO_vSetPinAltFun+0x1ac>)
 8000936:	430b      	orrs	r3, r1
 8000938:	6253      	str	r3, [r2, #36]	; 0x24
 800093a:	e01a      	b.n	8000972 <MGPIO_vSetPinAltFun+0x192>
			 case GPIOE_PORT  : GPIOE_SPTR->GPIO_AFRH.RegisterAccess |= (u32)(ALTFUN<<(4U*PinNum)) ; break ;
 800093c:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MGPIO_vSetPinAltFun+0x1b0>)
 800093e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000940:	7979      	ldrb	r1, [r7, #5]
 8000942:	79ba      	ldrb	r2, [r7, #6]
 8000944:	0092      	lsls	r2, r2, #2
 8000946:	fa01 f202 	lsl.w	r2, r1, r2
 800094a:	4611      	mov	r1, r2
 800094c:	4a10      	ldr	r2, [pc, #64]	; (8000990 <MGPIO_vSetPinAltFun+0x1b0>)
 800094e:	430b      	orrs	r3, r1
 8000950:	6253      	str	r3, [r2, #36]	; 0x24
 8000952:	e00e      	b.n	8000972 <MGPIO_vSetPinAltFun+0x192>
			 case GPIOH_PORT  : GPIOH_SPTR->GPIO_AFRH.RegisterAccess |= (u32)(ALTFUN<<(4U*PinNum)) ; break ;
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <MGPIO_vSetPinAltFun+0x1b4>)
 8000956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000958:	7979      	ldrb	r1, [r7, #5]
 800095a:	79ba      	ldrb	r2, [r7, #6]
 800095c:	0092      	lsls	r2, r2, #2
 800095e:	fa01 f202 	lsl.w	r2, r1, r2
 8000962:	4611      	mov	r1, r2
 8000964:	4a0b      	ldr	r2, [pc, #44]	; (8000994 <MGPIO_vSetPinAltFun+0x1b4>)
 8000966:	430b      	orrs	r3, r1
 8000968:	6253      	str	r3, [r2, #36]	; 0x24
 800096a:	e002      	b.n	8000972 <MGPIO_vSetPinAltFun+0x192>
			 default : /*ERROR*/ break ;
 800096c:	bf00      	nop
 800096e:	e000      	b.n	8000972 <MGPIO_vSetPinAltFun+0x192>
			 default : /*ERROR*/ break ;
 8000970:	bf00      	nop
		}
	}
}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40020000 	.word	0x40020000
 8000984:	40020400 	.word	0x40020400
 8000988:	40020800 	.word	0x40020800
 800098c:	40020c00 	.word	0x40020c00
 8000990:	40021000 	.word	0x40021000
 8000994:	40021c00 	.word	0x40021c00

08000998 <MRCC_vInitSystemClock>:


#include "MCAL_RCC_Interface.h"

void MRCC_vInitSystemClock(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
	CLR_BIT(RCC_SPTR->REG_RCC_CR.RegisterAccess, CR_HSION);
 800099c:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <MRCC_vInitSystemClock+0x58>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a13      	ldr	r2, [pc, #76]	; (80009f0 <MRCC_vInitSystemClock+0x58>)
 80009a2:	f023 0301 	bic.w	r3, r3, #1
 80009a6:	6013      	str	r3, [r2, #0]
    CLR_BIT(RCC_SPTR->REG_RCC_CR.RegisterAccess, CR_HSEON);
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MRCC_vInitSystemClock+0x58>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a10      	ldr	r2, [pc, #64]	; (80009f0 <MRCC_vInitSystemClock+0x58>)
 80009ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009b2:	6013      	str	r3, [r2, #0]
    CLR_BIT(RCC_SPTR->REG_RCC_CR.RegisterAccess, CR_PLLON);
 80009b4:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MRCC_vInitSystemClock+0x58>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a0d      	ldr	r2, [pc, #52]	; (80009f0 <MRCC_vInitSystemClock+0x58>)
 80009ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80009be:	6013      	str	r3, [r2, #0]
	#if CLOCK_SOURCE == HSI		/** HSI oscillator selected as system clock**********/
		/* 1- CLK SYS --> HSI */
		CLR_BIT(RCC_SPTR->REG_RCC_CFGR.RegisterAccess, CFGR_SW0);
 80009c0:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <MRCC_vInitSystemClock+0x58>)
 80009c2:	689b      	ldr	r3, [r3, #8]
 80009c4:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <MRCC_vInitSystemClock+0x58>)
 80009c6:	f023 0301 	bic.w	r3, r3, #1
 80009ca:	6093      	str	r3, [r2, #8]
		CLR_BIT(RCC_SPTR->REG_RCC_CFGR.RegisterAccess, CFGR_SW1);
 80009cc:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <MRCC_vInitSystemClock+0x58>)
 80009ce:	689b      	ldr	r3, [r3, #8]
 80009d0:	4a07      	ldr	r2, [pc, #28]	; (80009f0 <MRCC_vInitSystemClock+0x58>)
 80009d2:	f023 0302 	bic.w	r3, r3, #2
 80009d6:	6093      	str	r3, [r2, #8]
		/* 2- EN HSI*/
		SET_BIT(RCC_SPTR->REG_RCC_CR.RegisterAccess, CR_HSION);
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <MRCC_vInitSystemClock+0x58>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <MRCC_vInitSystemClock+0x58>)
 80009de:	f043 0301 	orr.w	r3, r3, #1
 80009e2:	6013      	str	r3, [r2, #0]
			/* Error*/
		#endif
	#else
		/* Error*/
	#endif
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800

080009f4 <MRCC_vEnableBusClock>:

void MRCC_vEnableBusClock(u8 AxBxENR_RCC_Bus, u8 Peripheral_PPxx)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	460a      	mov	r2, r1
 80009fe:	71fb      	strb	r3, [r7, #7]
 8000a00:	4613      	mov	r3, r2
 8000a02:	71bb      	strb	r3, [r7, #6]
	switch(AxBxENR_RCC_Bus)
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	2b03      	cmp	r3, #3
 8000a08:	d836      	bhi.n	8000a78 <MRCC_vEnableBusClock+0x84>
 8000a0a:	a201      	add	r2, pc, #4	; (adr r2, 8000a10 <MRCC_vEnableBusClock+0x1c>)
 8000a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a10:	08000a21 	.word	0x08000a21
 8000a14:	08000a37 	.word	0x08000a37
 8000a18:	08000a4d 	.word	0x08000a4d
 8000a1c:	08000a63 	.word	0x08000a63
	{
		case Bus_AHB1:
			SET_BIT(RCC_SPTR->REG_RCC_AHB1ENR.RegisterAccess, Peripheral_PPxx);  break ;
 8000a20:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <MRCC_vEnableBusClock+0x94>)
 8000a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a24:	79ba      	ldrb	r2, [r7, #6]
 8000a26:	2101      	movs	r1, #1
 8000a28:	fa01 f202 	lsl.w	r2, r1, r2
 8000a2c:	4611      	mov	r1, r2
 8000a2e:	4a16      	ldr	r2, [pc, #88]	; (8000a88 <MRCC_vEnableBusClock+0x94>)
 8000a30:	430b      	orrs	r3, r1
 8000a32:	6313      	str	r3, [r2, #48]	; 0x30
 8000a34:	e021      	b.n	8000a7a <MRCC_vEnableBusClock+0x86>
		case Bus_AHB2:
			SET_BIT(RCC_SPTR->REG_RCC_AHB2ENR.RegisterAccess, Peripheral_PPxx);  break ;
 8000a36:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <MRCC_vEnableBusClock+0x94>)
 8000a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a3a:	79ba      	ldrb	r2, [r7, #6]
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a42:	4611      	mov	r1, r2
 8000a44:	4a10      	ldr	r2, [pc, #64]	; (8000a88 <MRCC_vEnableBusClock+0x94>)
 8000a46:	430b      	orrs	r3, r1
 8000a48:	6353      	str	r3, [r2, #52]	; 0x34
 8000a4a:	e016      	b.n	8000a7a <MRCC_vEnableBusClock+0x86>
		case Bus_APB1:
			SET_BIT(RCC_SPTR->REG_RCC_APB1ENR.RegisterAccess, Peripheral_PPxx);  break ;
 8000a4c:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <MRCC_vEnableBusClock+0x94>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a50:	79ba      	ldrb	r2, [r7, #6]
 8000a52:	2101      	movs	r1, #1
 8000a54:	fa01 f202 	lsl.w	r2, r1, r2
 8000a58:	4611      	mov	r1, r2
 8000a5a:	4a0b      	ldr	r2, [pc, #44]	; (8000a88 <MRCC_vEnableBusClock+0x94>)
 8000a5c:	430b      	orrs	r3, r1
 8000a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a60:	e00b      	b.n	8000a7a <MRCC_vEnableBusClock+0x86>
		case Bus_APB2:
			SET_BIT(RCC_SPTR->REG_RCC_APB2ENR.RegisterAccess, Peripheral_PPxx);  break ;
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <MRCC_vEnableBusClock+0x94>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	79ba      	ldrb	r2, [r7, #6]
 8000a68:	2101      	movs	r1, #1
 8000a6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a6e:	4611      	mov	r1, r2
 8000a70:	4a05      	ldr	r2, [pc, #20]	; (8000a88 <MRCC_vEnableBusClock+0x94>)
 8000a72:	430b      	orrs	r3, r1
 8000a74:	6453      	str	r3, [r2, #68]	; 0x44
 8000a76:	e000      	b.n	8000a7a <MRCC_vEnableBusClock+0x86>
		default :        /************ERROR*/             				break ;
 8000a78:	bf00      	nop
	}
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800

08000a8c <MSPI_vInit>:
#include "MCAL_SPI_Interface.h"

void (* MSPI1_CallBack)(void) = NULL ;

void MSPI_vInit(u8 Copy_u8SPIx)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	71fb      	strb	r3, [r7, #7]
	volatile Reg_32Bit_Utag SPI_Config_Holder ; // to hold SPIx Config

	/* 1.SET PHASE */
	SPI_Config_Holder.BitAccess.BIT0 = SPI_PHASE;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	60fb      	str	r3, [r7, #12]

	/* 2.SET PLO */
	SPI_Config_Holder.BitAccess.BIT1 = GET_BIT(SPI_POLARITY, 0);
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	f043 0302 	orr.w	r3, r3, #2
 8000aa4:	60fb      	str	r3, [r7, #12]

	/* 3.SET MASTER OR SLAVE */
	SPI_Config_Holder.BitAccess.BIT2 = GET_BIT(SPI_MASTER_SLAVE, 0);
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	f043 0304 	orr.w	r3, r3, #4
 8000aac:	60fb      	str	r3, [r7, #12]

	/* 4.SET BOUD RATE */
	SPI_Config_Holder.BitAccess.BIT3 = GET_BIT(BUAD_RATE, 0);
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	f043 0308 	orr.w	r3, r3, #8
 8000ab4:	60fb      	str	r3, [r7, #12]
	SPI_Config_Holder.BitAccess.BIT4 = GET_BIT(BUAD_RATE, 1);
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	f36f 1304 	bfc	r3, #4, #1
 8000abc:	60fb      	str	r3, [r7, #12]
	SPI_Config_Holder.BitAccess.BIT5 = GET_BIT(BUAD_RATE, 2);
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	f36f 1345 	bfc	r3, #5, #1
 8000ac4:	60fb      	str	r3, [r7, #12]

	/* 5.SET DATA ORDER */
	SPI_Config_Holder.BitAccess.BIT7 = GET_BIT(DATA_ORDER, 0);
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	f36f 13c7 	bfc	r3, #7, #1
 8000acc:	60fb      	str	r3, [r7, #12]

	/* 6.SET SSI */
	SPI_Config_Holder.BitAccess.BIT8 = GET_BIT(SSI_STATE, 0);
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ad4:	60fb      	str	r3, [r7, #12]

	/* 7.SET SSM */
	SPI_Config_Holder.BitAccess.BIT9 = GET_BIT(SSM_STATE, 0);
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000adc:	60fb      	str	r3, [r7, #12]

	/* 8.SET DATA FORMAT */
	SPI_Config_Holder.BitAccess.BIT11 = GET_BIT(DATA_FORMAT, 0);
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	f36f 23cb 	bfc	r3, #11, #1
 8000ae4:	60fb      	str	r3, [r7, #12]

	switch (Copy_u8SPIx)
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	3b01      	subs	r3, #1
 8000aea:	2b03      	cmp	r3, #3
 8000aec:	d81a      	bhi.n	8000b24 <MSPI_vInit+0x98>
 8000aee:	a201      	add	r2, pc, #4	; (adr r2, 8000af4 <MSPI_vInit+0x68>)
 8000af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af4:	08000b05 	.word	0x08000b05
 8000af8:	08000b0d 	.word	0x08000b0d
 8000afc:	08000b15 	.word	0x08000b15
 8000b00:	08000b1d 	.word	0x08000b1d
	{
	case SPI_1_ : SPI1_SPTR->REG_SPI_CR1 = SPI_Config_Holder; break;
 8000b04:	4a0b      	ldr	r2, [pc, #44]	; (8000b34 <MSPI_vInit+0xa8>)
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	6013      	str	r3, [r2, #0]
 8000b0a:	e00c      	b.n	8000b26 <MSPI_vInit+0x9a>
	case SPI_2_ : SPI2_SPTR->REG_SPI_CR1 = SPI_Config_Holder; break;
 8000b0c:	4a0a      	ldr	r2, [pc, #40]	; (8000b38 <MSPI_vInit+0xac>)
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	6013      	str	r3, [r2, #0]
 8000b12:	e008      	b.n	8000b26 <MSPI_vInit+0x9a>
	case SPI_3_ : SPI3_SPTR->REG_SPI_CR1 = SPI_Config_Holder; break;
 8000b14:	4a09      	ldr	r2, [pc, #36]	; (8000b3c <MSPI_vInit+0xb0>)
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	6013      	str	r3, [r2, #0]
 8000b1a:	e004      	b.n	8000b26 <MSPI_vInit+0x9a>
	case SPI_4_ : SPI4_SPTR->REG_SPI_CR1 = SPI_Config_Holder; break;
 8000b1c:	4a08      	ldr	r2, [pc, #32]	; (8000b40 <MSPI_vInit+0xb4>)
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	6013      	str	r3, [r2, #0]
 8000b22:	e000      	b.n	8000b26 <MSPI_vInit+0x9a>
	default     : /*ERROR*/ break;
 8000b24:	bf00      	nop
	}
}
 8000b26:	bf00      	nop
 8000b28:	3714      	adds	r7, #20
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40013000 	.word	0x40013000
 8000b38:	40003800 	.word	0x40003800
 8000b3c:	40003c00 	.word	0x40003c00
 8000b40:	40013400 	.word	0x40013400

08000b44 <MSPI_vEnable>:

void MSPI_vEnable(u8 Copy_u8SPIx)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
	switch (Copy_u8SPIx)
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	3b01      	subs	r3, #1
 8000b52:	2b03      	cmp	r3, #3
 8000b54:	d822      	bhi.n	8000b9c <MSPI_vEnable+0x58>
 8000b56:	a201      	add	r2, pc, #4	; (adr r2, 8000b5c <MSPI_vEnable+0x18>)
 8000b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b5c:	08000b6d 	.word	0x08000b6d
 8000b60:	08000b79 	.word	0x08000b79
 8000b64:	08000b85 	.word	0x08000b85
 8000b68:	08000b91 	.word	0x08000b91
	{
	    case SPI_1_ : SPI1_SPTR->REG_SPI_CR1.BitAccess.BIT6 = 1U; break;
 8000b6c:	4a0f      	ldr	r2, [pc, #60]	; (8000bac <MSPI_vEnable+0x68>)
 8000b6e:	6813      	ldr	r3, [r2, #0]
 8000b70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b74:	6013      	str	r3, [r2, #0]
 8000b76:	e012      	b.n	8000b9e <MSPI_vEnable+0x5a>
		case SPI_2_ : SPI1_SPTR->REG_SPI_CR1.BitAccess.BIT6 = 1U; break;
 8000b78:	4a0c      	ldr	r2, [pc, #48]	; (8000bac <MSPI_vEnable+0x68>)
 8000b7a:	6813      	ldr	r3, [r2, #0]
 8000b7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b80:	6013      	str	r3, [r2, #0]
 8000b82:	e00c      	b.n	8000b9e <MSPI_vEnable+0x5a>
		case SPI_3_ : SPI1_SPTR->REG_SPI_CR1.BitAccess.BIT6 = 1U; break;
 8000b84:	4a09      	ldr	r2, [pc, #36]	; (8000bac <MSPI_vEnable+0x68>)
 8000b86:	6813      	ldr	r3, [r2, #0]
 8000b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b8c:	6013      	str	r3, [r2, #0]
 8000b8e:	e006      	b.n	8000b9e <MSPI_vEnable+0x5a>
		case SPI_4_ : SPI1_SPTR->REG_SPI_CR1.BitAccess.BIT6 = 1U; break;
 8000b90:	4a06      	ldr	r2, [pc, #24]	; (8000bac <MSPI_vEnable+0x68>)
 8000b92:	6813      	ldr	r3, [r2, #0]
 8000b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b98:	6013      	str	r3, [r2, #0]
 8000b9a:	e000      	b.n	8000b9e <MSPI_vEnable+0x5a>
		default      : /*ERROR*/ break;
 8000b9c:	bf00      	nop
	}
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40013000 	.word	0x40013000

08000bb0 <MSPI1_u16TrasRes>:
		default      : /*ERROR*/ break;
	}
}

u16 MSPI1_u16TrasRes(u16 Copy_u16Data)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	80fb      	strh	r3, [r7, #6]
	u16 L_u16Data =0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	81fb      	strh	r3, [r7, #14]
	while (GET_BIT(SPI1_SPTR->REG_SPI_SR.RegisterAccess, 7));
 8000bbe:	bf00      	nop
 8000bc0:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <MSPI1_u16TrasRes+0x48>)
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	09db      	lsrs	r3, r3, #7
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d1f8      	bne.n	8000bc0 <MSPI1_u16TrasRes+0x10>
	SPI1_SPTR->REG_SPI_DR.RegisterAccess = Copy_u16Data;
 8000bce:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <MSPI1_u16TrasRes+0x48>)
 8000bd0:	88fb      	ldrh	r3, [r7, #6]
 8000bd2:	60d3      	str	r3, [r2, #12]
	while (GET_BIT(SPI1_SPTR->REG_SPI_SR.RegisterAccess, 7));
 8000bd4:	bf00      	nop
 8000bd6:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <MSPI1_u16TrasRes+0x48>)
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	09db      	lsrs	r3, r3, #7
 8000bdc:	f003 0301 	and.w	r3, r3, #1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d1f8      	bne.n	8000bd6 <MSPI1_u16TrasRes+0x26>
	L_u16Data = SPI1_SPTR->REG_SPI_DR.RegisterAccess;
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <MSPI1_u16TrasRes+0x48>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	81fb      	strh	r3, [r7, #14]
	return L_u16Data;
 8000bea:	89fb      	ldrh	r3, [r7, #14]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	40013000 	.word	0x40013000

08000bfc <SPI1_IRQHandler>:
	/* Set CallBack */
	MSPI1_CallBack = ptr ;
}

void SPI1_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	/* Excute Call Back*/
	MSPI1_CallBack();
 8000c00:	4b02      	ldr	r3, [pc, #8]	; (8000c0c <SPI1_IRQHandler+0x10>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4798      	blx	r3
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000024 	.word	0x20000024

08000c10 <MSTK_Init>:
static volatile u8 G_u8ReadFlag;
static u32 counter;
/*=====================================*/

void MSTK_Init(STK_CLK_SRC_t STK_CLK_SRC)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
	/*Clear Val & Count flag*/
	STK_SPTR->REG_STK_VAL.RegisterAccess = 0;
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <MSTK_Init+0x48>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
	/*Select CLK Source*/
	switch(STK_CLK_SRC)
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d002      	beq.n	8000c2c <MSTK_Init+0x1c>
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d008      	beq.n	8000c3c <MSTK_Init+0x2c>
			break;
		case STK_CLK_SRC_HCLK_Div8:
			STK_SPTR->REG_STK_CTRL.RegisterAccess = 0;
			STK_CLK_Ms_Ticks=2000U;
			break;
		default :/*error*/	break;
 8000c2a:	e00f      	b.n	8000c4c <MSTK_Init+0x3c>
			STK_SPTR->REG_STK_CTRL.RegisterAccess = 0x00000004;
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <MSTK_Init+0x48>)
 8000c2e:	2204      	movs	r2, #4
 8000c30:	601a      	str	r2, [r3, #0]
			STK_CLK_Ms_Ticks=16000U;
 8000c32:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <MSTK_Init+0x4c>)
 8000c34:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000c38:	601a      	str	r2, [r3, #0]
			break;
 8000c3a:	e007      	b.n	8000c4c <MSTK_Init+0x3c>
			STK_SPTR->REG_STK_CTRL.RegisterAccess = 0;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <MSTK_Init+0x48>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
			STK_CLK_Ms_Ticks=2000U;
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <MSTK_Init+0x4c>)
 8000c44:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000c48:	601a      	str	r2, [r3, #0]
			break;
 8000c4a:	bf00      	nop
	}
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000e010 	.word	0xe000e010
 8000c5c:	20000028 	.word	0x20000028

08000c60 <MSTK_DelayMs>:
	STK_SPTR->REG_STK_VAL.RegisterAccess =0;
	STK_SPTR->REG_STK_CTRL.RegisterAccess &=~ STK_CTRL_TICKINT;
}

void MSTK_DelayMs(u32 Copy_u32RequiredMs)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	STK_SPTR->REG_STK_LOAD.RegisterAccess = (STK_CLK_Ms_Ticks*Copy_u32RequiredMs)-1;
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <MSTK_DelayMs+0x50>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	fb02 f303 	mul.w	r3, r2, r3
 8000c72:	4a10      	ldr	r2, [pc, #64]	; (8000cb4 <MSTK_DelayMs+0x54>)
 8000c74:	3b01      	subs	r3, #1
 8000c76:	6053      	str	r3, [r2, #4]
	STK_SPTR->REG_STK_VAL.RegisterAccess =0;
 8000c78:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <MSTK_DelayMs+0x54>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
	STK_SPTR->REG_STK_CTRL.RegisterAccess |= STK_CTRL_ENABLE;
 8000c7e:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <MSTK_DelayMs+0x54>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a0c      	ldr	r2, [pc, #48]	; (8000cb4 <MSTK_DelayMs+0x54>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6013      	str	r3, [r2, #0]
	while((STK_SPTR->REG_STK_CTRL.RegisterAccess & STK_CTRL_COUNTFLAG) == 0);
 8000c8a:	bf00      	nop
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MSTK_DelayMs+0x54>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d0f9      	beq.n	8000c8c <MSTK_DelayMs+0x2c>
	STK_SPTR->REG_STK_CTRL.RegisterAccess &=~ STK_CTRL_ENABLE;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <MSTK_DelayMs+0x54>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a05      	ldr	r2, [pc, #20]	; (8000cb4 <MSTK_DelayMs+0x54>)
 8000c9e:	f023 0301 	bic.w	r3, r3, #1
 8000ca2:	6013      	str	r3, [r2, #0]

}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	20000028 	.word	0x20000028
 8000cb4:	e000e010 	.word	0xe000e010

08000cb8 <SysTick_Handler>:
	STK_pAppFun();
	STK_SPTR->REG_STK_CTRL.RegisterAccess |= 3U;
}

void SysTick_Handler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	if(STK_CallBackMode != PWM)
 8000cbc:	4b24      	ldr	r3, [pc, #144]	; (8000d50 <SysTick_Handler+0x98>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d01a      	beq.n	8000cfc <SysTick_Handler+0x44>
	{
		if(STK_CallBackMode == ONE_TIME)
 8000cc6:	4b22      	ldr	r3, [pc, #136]	; (8000d50 <SysTick_Handler+0x98>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d111      	bne.n	8000cf4 <SysTick_Handler+0x3c>
		{
			STK_SPTR->REG_STK_CTRL.RegisterAccess &=~ STK_CTRL_ENABLE;
 8000cd0:	4b20      	ldr	r3, [pc, #128]	; (8000d54 <SysTick_Handler+0x9c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a1f      	ldr	r2, [pc, #124]	; (8000d54 <SysTick_Handler+0x9c>)
 8000cd6:	f023 0301 	bic.w	r3, r3, #1
 8000cda:	6013      	str	r3, [r2, #0]
			STK_SPTR->REG_STK_LOAD.RegisterAccess =0;
 8000cdc:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <SysTick_Handler+0x9c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	605a      	str	r2, [r3, #4]
			STK_SPTR->REG_STK_VAL.RegisterAccess  =0;
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	; (8000d54 <SysTick_Handler+0x9c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
			STK_SPTR->REG_STK_CTRL.RegisterAccess &=~ STK_CTRL_TICKINT;
 8000ce8:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <SysTick_Handler+0x9c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a19      	ldr	r2, [pc, #100]	; (8000d54 <SysTick_Handler+0x9c>)
 8000cee:	f023 0302 	bic.w	r3, r3, #2
 8000cf2:	6013      	str	r3, [r2, #0]
		}
		else{/*error*/}
		STK_pAppFun();
 8000cf4:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <SysTick_Handler+0xa0>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4798      	blx	r3
 8000cfa:	e01d      	b.n	8000d38 <SysTick_Handler+0x80>
	}else
	{
		counter++;
 8000cfc:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <SysTick_Handler+0xa4>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	3301      	adds	r3, #1
 8000d02:	4a16      	ldr	r2, [pc, #88]	; (8000d5c <SysTick_Handler+0xa4>)
 8000d04:	6013      	str	r3, [r2, #0]
		if(counter == (STK_RequiredOnTime))
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <SysTick_Handler+0xa4>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <SysTick_Handler+0xa8>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d103      	bne.n	8000d1a <SysTick_Handler+0x62>
		{
			STK_pAppFun();
 8000d12:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <SysTick_Handler+0xa0>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4798      	blx	r3
 8000d18:	e00e      	b.n	8000d38 <SysTick_Handler+0x80>
		}else if(counter == (STK_RequiredOnTime+STK_RequiredOffTime))
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <SysTick_Handler+0xa8>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <SysTick_Handler+0xac>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	441a      	add	r2, r3
 8000d24:	4b0d      	ldr	r3, [pc, #52]	; (8000d5c <SysTick_Handler+0xa4>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d105      	bne.n	8000d38 <SysTick_Handler+0x80>
		{
			STK_pAppFun();
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <SysTick_Handler+0xa0>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4798      	blx	r3
			counter=0;
 8000d32:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <SysTick_Handler+0xa4>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
		}
	}
	G_u8ReadFlag = GET_BIT(STK_SPTR->REG_STK_CTRL.RegisterAccess, 16U);
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <SysTick_Handler+0x9c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	0c1b      	lsrs	r3, r3, #16
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <SysTick_Handler+0xb0>)
 8000d48:	701a      	strb	r2, [r3, #0]
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000038 	.word	0x20000038
 8000d54:	e000e010 	.word	0xe000e010
 8000d58:	20000034 	.word	0x20000034
 8000d5c:	2000003c 	.word	0x2000003c
 8000d60:	2000002c 	.word	0x2000002c
 8000d64:	20000030 	.word	0x20000030
 8000d68:	20000039 	.word	0x20000039

08000d6c <main>:
#include "main.h"

u8 G_key = 0;

int main(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
	MRCC_vInitSystemClock();
 8000d70:	f7ff fe12 	bl	8000998 <MRCC_vInitSystemClock>
	MSTK_Init(STK_CLK_SRC_HCLK_Div8);
 8000d74:	2001      	movs	r0, #1
 8000d76:	f7ff ff4b 	bl	8000c10 <MSTK_Init>

	MRCC_vEnableBusClock(Bus_AHB1, PHB1_GPIOA);
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f7ff fe39 	bl	80009f4 <MRCC_vEnableBusClock>
	MRCC_vEnableBusClock(Bus_APB2, PPB2_SPI1);
 8000d82:	210c      	movs	r1, #12
 8000d84:	2003      	movs	r0, #3
 8000d86:	f7ff fe35 	bl	80009f4 <MRCC_vEnableBusClock>
	MRCC_vEnableBusClock(Bus_APB2, PPB2_SYSCFG);
 8000d8a:	210e      	movs	r1, #14
 8000d8c:	2003      	movs	r0, #3
 8000d8e:	f7ff fe31 	bl	80009f4 <MRCC_vEnableBusClock>


	MSPI_vInit(SPI_1_);
 8000d92:	2001      	movs	r0, #1
 8000d94:	f7ff fe7a 	bl	8000a8c <MSPI_vInit>
	MSPI_vEnable(SPI_1_);
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f7ff fed3 	bl	8000b44 <MSPI_vEnable>
	HTFT_vInit();
 8000d9e:	f7ff fa3f 	bl	8000220 <HTFT_vInit>



	while(1)
 8000da2:	e7fe      	b.n	8000da2 <main+0x36>

08000da4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000da4:	480d      	ldr	r0, [pc, #52]	; (8000ddc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000da6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000da8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dac:	480c      	ldr	r0, [pc, #48]	; (8000de0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dae:	490d      	ldr	r1, [pc, #52]	; (8000de4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000db0:	4a0d      	ldr	r2, [pc, #52]	; (8000de8 <LoopForever+0xe>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db4:	e002      	b.n	8000dbc <LoopCopyDataInit>

08000db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dba:	3304      	adds	r3, #4

08000dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc0:	d3f9      	bcc.n	8000db6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dc4:	4c0a      	ldr	r4, [pc, #40]	; (8000df0 <LoopForever+0x16>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc8:	e001      	b.n	8000dce <LoopFillZerobss>

08000dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dcc:	3204      	adds	r2, #4

08000dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd0:	d3fb      	bcc.n	8000dca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dd2:	f000 f811 	bl	8000df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dd6:	f7ff ffc9 	bl	8000d6c <main>

08000dda <LoopForever>:

LoopForever:
    b LoopForever
 8000dda:	e7fe      	b.n	8000dda <LoopForever>
  ldr   r0, =_estack
 8000ddc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000de8:	08000e60 	.word	0x08000e60
  ldr r2, =_sbss
 8000dec:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000df0:	20000040 	.word	0x20000040

08000df4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000df4:	e7fe      	b.n	8000df4 <ADC_IRQHandler>
	...

08000df8 <__libc_init_array>:
 8000df8:	b570      	push	{r4, r5, r6, lr}
 8000dfa:	4d0d      	ldr	r5, [pc, #52]	; (8000e30 <__libc_init_array+0x38>)
 8000dfc:	4c0d      	ldr	r4, [pc, #52]	; (8000e34 <__libc_init_array+0x3c>)
 8000dfe:	1b64      	subs	r4, r4, r5
 8000e00:	10a4      	asrs	r4, r4, #2
 8000e02:	2600      	movs	r6, #0
 8000e04:	42a6      	cmp	r6, r4
 8000e06:	d109      	bne.n	8000e1c <__libc_init_array+0x24>
 8000e08:	4d0b      	ldr	r5, [pc, #44]	; (8000e38 <__libc_init_array+0x40>)
 8000e0a:	4c0c      	ldr	r4, [pc, #48]	; (8000e3c <__libc_init_array+0x44>)
 8000e0c:	f000 f818 	bl	8000e40 <_init>
 8000e10:	1b64      	subs	r4, r4, r5
 8000e12:	10a4      	asrs	r4, r4, #2
 8000e14:	2600      	movs	r6, #0
 8000e16:	42a6      	cmp	r6, r4
 8000e18:	d105      	bne.n	8000e26 <__libc_init_array+0x2e>
 8000e1a:	bd70      	pop	{r4, r5, r6, pc}
 8000e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e20:	4798      	blx	r3
 8000e22:	3601      	adds	r6, #1
 8000e24:	e7ee      	b.n	8000e04 <__libc_init_array+0xc>
 8000e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e2a:	4798      	blx	r3
 8000e2c:	3601      	adds	r6, #1
 8000e2e:	e7f2      	b.n	8000e16 <__libc_init_array+0x1e>
 8000e30:	08000e58 	.word	0x08000e58
 8000e34:	08000e58 	.word	0x08000e58
 8000e38:	08000e58 	.word	0x08000e58
 8000e3c:	08000e5c 	.word	0x08000e5c

08000e40 <_init>:
 8000e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e42:	bf00      	nop
 8000e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e46:	bc08      	pop	{r3}
 8000e48:	469e      	mov	lr, r3
 8000e4a:	4770      	bx	lr

08000e4c <_fini>:
 8000e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e4e:	bf00      	nop
 8000e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e52:	bc08      	pop	{r3}
 8000e54:	469e      	mov	lr, r3
 8000e56:	4770      	bx	lr
