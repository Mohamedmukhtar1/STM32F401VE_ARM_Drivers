
STM32F401VET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ab4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c48  08000c50  00010c50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000c48  08000c48  00010c50  2**0
                  CONTENTS
  4 .ARM          00000000  08000c48  08000c48  00010c50  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c48  08000c50  00010c50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c48  08000c48  00010c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c4c  08000c4c  00010c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010c50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000000  08000c50  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  08000c50  0002003c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010c50  2**0
                  CONTENTS, READONLY
 12 .debug_info   000018a6  00000000  00000000  00010c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000753  00000000  00000000  00012526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000260  00000000  00000000  00012c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001e8  00000000  00000000  00012ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000005e5  00000000  00000000  000130c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000023c5  00000000  00000000  000136ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00005ee7  00000000  00000000  00015a72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001b959  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000007f8  00000000  00000000  0001b9ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000c30 	.word	0x08000c30

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000c30 	.word	0x08000c30

080001d4 <Delay_vMilliSecond16MHzoscillator>:
 */

#include "DELAY_UNIT.h"

extern void Delay_vMilliSecond16MHzoscillator(U16 copy_U16mSTime)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	80fb      	strh	r3, [r7, #6]
	volatile U16 u16Local_Count1 =0;
 80001de:	2300      	movs	r3, #0
 80001e0:	81fb      	strh	r3, [r7, #14]
	volatile U16 u16Local_Count2 =0;
 80001e2:	2300      	movs	r3, #0
 80001e4:	81bb      	strh	r3, [r7, #12]
	for(u16Local_Count1 = 0 ; u16Local_Count1 < copy_U16mSTime  ; u16Local_Count1++ )
 80001e6:	2300      	movs	r3, #0
 80001e8:	81fb      	strh	r3, [r7, #14]
 80001ea:	e012      	b.n	8000212 <Delay_vMilliSecond16MHzoscillator+0x3e>
	for(u16Local_Count2  = 0 ; u16Local_Count2  < 3180  ; u16Local_Count2 ++ )
 80001ec:	2300      	movs	r3, #0
 80001ee:	81bb      	strh	r3, [r7, #12]
 80001f0:	e004      	b.n	80001fc <Delay_vMilliSecond16MHzoscillator+0x28>
 80001f2:	89bb      	ldrh	r3, [r7, #12]
 80001f4:	b29b      	uxth	r3, r3
 80001f6:	3301      	adds	r3, #1
 80001f8:	b29b      	uxth	r3, r3
 80001fa:	81bb      	strh	r3, [r7, #12]
 80001fc:	89bb      	ldrh	r3, [r7, #12]
 80001fe:	b29b      	uxth	r3, r3
 8000200:	f640 426b 	movw	r2, #3179	; 0xc6b
 8000204:	4293      	cmp	r3, r2
 8000206:	d9f4      	bls.n	80001f2 <Delay_vMilliSecond16MHzoscillator+0x1e>
	for(u16Local_Count1 = 0 ; u16Local_Count1 < copy_U16mSTime  ; u16Local_Count1++ )
 8000208:	89fb      	ldrh	r3, [r7, #14]
 800020a:	b29b      	uxth	r3, r3
 800020c:	3301      	adds	r3, #1
 800020e:	b29b      	uxth	r3, r3
 8000210:	81fb      	strh	r3, [r7, #14]
 8000212:	89fb      	ldrh	r3, [r7, #14]
 8000214:	b29b      	uxth	r3, r3
 8000216:	88fa      	ldrh	r2, [r7, #6]
 8000218:	429a      	cmp	r2, r3
 800021a:	d8e7      	bhi.n	80001ec <Delay_vMilliSecond16MHzoscillator+0x18>
	{/* Do nothing for 1 ms*/}
}
 800021c:	bf00      	nop
 800021e:	bf00      	nop
 8000220:	3714      	adds	r7, #20
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr

0800022a <LCD_vInitPinMode>:
#include "LCD_interface.h"
#include "LCD_private.h"
#include "LCD_config.h"

void LCD_vInitPinMode(void)
{
 800022a:	b580      	push	{r7, lr}
 800022c:	b082      	sub	sp, #8
 800022e:	af00      	add	r7, sp, #0
	for(U8 i=0;i<=5;i++)
 8000230:	2300      	movs	r3, #0
 8000232:	71fb      	strb	r3, [r7, #7]
 8000234:	e014      	b.n	8000260 <LCD_vInitPinMode+0x36>
	{
		MGPIO_vSetPinMode(GPIOA_PORT,i,OUTPUT_MODE);
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	2201      	movs	r2, #1
 800023a:	4619      	mov	r1, r3
 800023c:	2000      	movs	r0, #0
 800023e:	f000 f963 	bl	8000508 <MGPIO_vSetPinMode>
		MGPIO_vSetPinOutputType(GPIOA_PORT,i,OUTPUT_PUSH_PULL_TYPE);
 8000242:	79fb      	ldrb	r3, [r7, #7]
 8000244:	2200      	movs	r2, #0
 8000246:	4619      	mov	r1, r3
 8000248:	2000      	movs	r0, #0
 800024a:	f000 f9d5 	bl	80005f8 <MGPIO_vSetPinOutputType>
		MGPIO_vSetPinOutputSpeed(GPIOA_PORT,i,OUTPUT_LOW_SPEED);
 800024e:	79fb      	ldrb	r3, [r7, #7]
 8000250:	2200      	movs	r2, #0
 8000252:	4619      	mov	r1, r3
 8000254:	2000      	movs	r0, #0
 8000256:	f000 fa41 	bl	80006dc <MGPIO_vSetPinOutputSpeed>
	for(U8 i=0;i<=5;i++)
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	3301      	adds	r3, #1
 800025e:	71fb      	strb	r3, [r7, #7]
 8000260:	79fb      	ldrb	r3, [r7, #7]
 8000262:	2b05      	cmp	r3, #5
 8000264:	d9e7      	bls.n	8000236 <LCD_vInitPinMode+0xc>
	}
}
 8000266:	bf00      	nop
 8000268:	bf00      	nop
 800026a:	3708      	adds	r7, #8
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}

08000270 <LCD_WriteCommand>:
void LCD_WriteCommand(U8 Command)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
	MGPIO_vWritePinData(RS,LOW_STATE);
 800027a:	2200      	movs	r2, #0
 800027c:	2100      	movs	r1, #0
 800027e:	2000      	movs	r0, #0
 8000280:	f000 faa4 	bl	80007cc <MGPIO_vWritePinData>
	MGPIO_vWritePinData(LCD_D4,GET_BIT(Command,4));
 8000284:	79fb      	ldrb	r3, [r7, #7]
 8000286:	091b      	lsrs	r3, r3, #4
 8000288:	b2db      	uxtb	r3, r3
 800028a:	f003 0301 	and.w	r3, r3, #1
 800028e:	b2db      	uxtb	r3, r3
 8000290:	461a      	mov	r2, r3
 8000292:	2102      	movs	r1, #2
 8000294:	2000      	movs	r0, #0
 8000296:	f000 fa99 	bl	80007cc <MGPIO_vWritePinData>
	MGPIO_vWritePinData(LCD_D5,GET_BIT(Command,5));
 800029a:	79fb      	ldrb	r3, [r7, #7]
 800029c:	095b      	lsrs	r3, r3, #5
 800029e:	b2db      	uxtb	r3, r3
 80002a0:	f003 0301 	and.w	r3, r3, #1
 80002a4:	b2db      	uxtb	r3, r3
 80002a6:	461a      	mov	r2, r3
 80002a8:	2103      	movs	r1, #3
 80002aa:	2000      	movs	r0, #0
 80002ac:	f000 fa8e 	bl	80007cc <MGPIO_vWritePinData>
	MGPIO_vWritePinData(LCD_D6,GET_BIT(Command,6));
 80002b0:	79fb      	ldrb	r3, [r7, #7]
 80002b2:	099b      	lsrs	r3, r3, #6
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	f003 0301 	and.w	r3, r3, #1
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	461a      	mov	r2, r3
 80002be:	2104      	movs	r1, #4
 80002c0:	2000      	movs	r0, #0
 80002c2:	f000 fa83 	bl	80007cc <MGPIO_vWritePinData>
	MGPIO_vWritePinData(LCD_D7,GET_BIT(Command,7));
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	09db      	lsrs	r3, r3, #7
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	461a      	mov	r2, r3
 80002ce:	2105      	movs	r1, #5
 80002d0:	2000      	movs	r0, #0
 80002d2:	f000 fa7b 	bl	80007cc <MGPIO_vWritePinData>
	MGPIO_vWritePinData(EN,HIGH_STATE);
 80002d6:	2201      	movs	r2, #1
 80002d8:	2101      	movs	r1, #1
 80002da:	2000      	movs	r0, #0
 80002dc:	f000 fa76 	bl	80007cc <MGPIO_vWritePinData>
	Delay_vMilliSecond16MHzoscillator(2);
 80002e0:	2002      	movs	r0, #2
 80002e2:	f7ff ff77 	bl	80001d4 <Delay_vMilliSecond16MHzoscillator>
	MGPIO_vWritePinData(EN,LOW_STATE);
 80002e6:	2200      	movs	r2, #0
 80002e8:	2101      	movs	r1, #1
 80002ea:	2000      	movs	r0, #0
 80002ec:	f000 fa6e 	bl	80007cc <MGPIO_vWritePinData>
	Delay_vMilliSecond16MHzoscillator(2);
 80002f0:	2002      	movs	r0, #2
 80002f2:	f7ff ff6f 	bl	80001d4 <Delay_vMilliSecond16MHzoscillator>

	MGPIO_vWritePinData(LCD_D4,GET_BIT(Command,0));
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	f003 0301 	and.w	r3, r3, #1
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	461a      	mov	r2, r3
 8000300:	2102      	movs	r1, #2
 8000302:	2000      	movs	r0, #0
 8000304:	f000 fa62 	bl	80007cc <MGPIO_vWritePinData>
	MGPIO_vWritePinData(LCD_D5,GET_BIT(Command,1));
 8000308:	79fb      	ldrb	r3, [r7, #7]
 800030a:	085b      	lsrs	r3, r3, #1
 800030c:	b2db      	uxtb	r3, r3
 800030e:	f003 0301 	and.w	r3, r3, #1
 8000312:	b2db      	uxtb	r3, r3
 8000314:	461a      	mov	r2, r3
 8000316:	2103      	movs	r1, #3
 8000318:	2000      	movs	r0, #0
 800031a:	f000 fa57 	bl	80007cc <MGPIO_vWritePinData>
	MGPIO_vWritePinData(LCD_D6,GET_BIT(Command,2));
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	089b      	lsrs	r3, r3, #2
 8000322:	b2db      	uxtb	r3, r3
 8000324:	f003 0301 	and.w	r3, r3, #1
 8000328:	b2db      	uxtb	r3, r3
 800032a:	461a      	mov	r2, r3
 800032c:	2104      	movs	r1, #4
 800032e:	2000      	movs	r0, #0
 8000330:	f000 fa4c 	bl	80007cc <MGPIO_vWritePinData>
	MGPIO_vWritePinData(LCD_D7,GET_BIT(Command,3));
 8000334:	79fb      	ldrb	r3, [r7, #7]
 8000336:	08db      	lsrs	r3, r3, #3
 8000338:	b2db      	uxtb	r3, r3
 800033a:	f003 0301 	and.w	r3, r3, #1
 800033e:	b2db      	uxtb	r3, r3
 8000340:	461a      	mov	r2, r3
 8000342:	2105      	movs	r1, #5
 8000344:	2000      	movs	r0, #0
 8000346:	f000 fa41 	bl	80007cc <MGPIO_vWritePinData>
	MGPIO_vWritePinData(EN,HIGH_STATE);
 800034a:	2201      	movs	r2, #1
 800034c:	2101      	movs	r1, #1
 800034e:	2000      	movs	r0, #0
 8000350:	f000 fa3c 	bl	80007cc <MGPIO_vWritePinData>
	Delay_vMilliSecond16MHzoscillator(2);
 8000354:	2002      	movs	r0, #2
 8000356:	f7ff ff3d 	bl	80001d4 <Delay_vMilliSecond16MHzoscillator>
	MGPIO_vWritePinData(EN,LOW_STATE);
 800035a:	2200      	movs	r2, #0
 800035c:	2101      	movs	r1, #1
 800035e:	2000      	movs	r0, #0
 8000360:	f000 fa34 	bl	80007cc <MGPIO_vWritePinData>
	Delay_vMilliSecond16MHzoscillator(2);
 8000364:	2002      	movs	r0, #2
 8000366:	f7ff ff35 	bl	80001d4 <Delay_vMilliSecond16MHzoscillator>
}
 800036a:	bf00      	nop
 800036c:	3708      	adds	r7, #8
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}

08000372 <LCD_WriteData>:

void LCD_WriteData(U8 Data)
{
 8000372:	b580      	push	{r7, lr}
 8000374:	b082      	sub	sp, #8
 8000376:	af00      	add	r7, sp, #0
 8000378:	4603      	mov	r3, r0
 800037a:	71fb      	strb	r3, [r7, #7]
	MGPIO_vWritePinData(RS,HIGH_STATE);
 800037c:	2201      	movs	r2, #1
 800037e:	2100      	movs	r1, #0
 8000380:	2000      	movs	r0, #0
 8000382:	f000 fa23 	bl	80007cc <MGPIO_vWritePinData>
	MGPIO_vWritePinData(LCD_D4,GET_BIT(Data,4));
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	091b      	lsrs	r3, r3, #4
 800038a:	b2db      	uxtb	r3, r3
 800038c:	f003 0301 	and.w	r3, r3, #1
 8000390:	b2db      	uxtb	r3, r3
 8000392:	461a      	mov	r2, r3
 8000394:	2102      	movs	r1, #2
 8000396:	2000      	movs	r0, #0
 8000398:	f000 fa18 	bl	80007cc <MGPIO_vWritePinData>
	MGPIO_vWritePinData(LCD_D5,GET_BIT(Data,5));
 800039c:	79fb      	ldrb	r3, [r7, #7]
 800039e:	095b      	lsrs	r3, r3, #5
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	f003 0301 	and.w	r3, r3, #1
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	461a      	mov	r2, r3
 80003aa:	2103      	movs	r1, #3
 80003ac:	2000      	movs	r0, #0
 80003ae:	f000 fa0d 	bl	80007cc <MGPIO_vWritePinData>
	MGPIO_vWritePinData(LCD_D6,GET_BIT(Data,6));
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	099b      	lsrs	r3, r3, #6
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	f003 0301 	and.w	r3, r3, #1
 80003bc:	b2db      	uxtb	r3, r3
 80003be:	461a      	mov	r2, r3
 80003c0:	2104      	movs	r1, #4
 80003c2:	2000      	movs	r0, #0
 80003c4:	f000 fa02 	bl	80007cc <MGPIO_vWritePinData>
	MGPIO_vWritePinData(LCD_D7,GET_BIT(Data,7));
 80003c8:	79fb      	ldrb	r3, [r7, #7]
 80003ca:	09db      	lsrs	r3, r3, #7
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	461a      	mov	r2, r3
 80003d0:	2105      	movs	r1, #5
 80003d2:	2000      	movs	r0, #0
 80003d4:	f000 f9fa 	bl	80007cc <MGPIO_vWritePinData>
	MGPIO_vWritePinData(EN,HIGH_STATE);
 80003d8:	2201      	movs	r2, #1
 80003da:	2101      	movs	r1, #1
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f9f5 	bl	80007cc <MGPIO_vWritePinData>
	Delay_vMilliSecond16MHzoscillator(2);
 80003e2:	2002      	movs	r0, #2
 80003e4:	f7ff fef6 	bl	80001d4 <Delay_vMilliSecond16MHzoscillator>
	MGPIO_vWritePinData(EN,LOW_STATE);
 80003e8:	2200      	movs	r2, #0
 80003ea:	2101      	movs	r1, #1
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f9ed 	bl	80007cc <MGPIO_vWritePinData>

	Delay_vMilliSecond16MHzoscillator(2);
 80003f2:	2002      	movs	r0, #2
 80003f4:	f7ff feee 	bl	80001d4 <Delay_vMilliSecond16MHzoscillator>
	MGPIO_vWritePinData(LCD_D4,GET_BIT(Data,0));
 80003f8:	79fb      	ldrb	r3, [r7, #7]
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	461a      	mov	r2, r3
 8000402:	2102      	movs	r1, #2
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f9e1 	bl	80007cc <MGPIO_vWritePinData>
	MGPIO_vWritePinData(LCD_D5,GET_BIT(Data,1));
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	085b      	lsrs	r3, r3, #1
 800040e:	b2db      	uxtb	r3, r3
 8000410:	f003 0301 	and.w	r3, r3, #1
 8000414:	b2db      	uxtb	r3, r3
 8000416:	461a      	mov	r2, r3
 8000418:	2103      	movs	r1, #3
 800041a:	2000      	movs	r0, #0
 800041c:	f000 f9d6 	bl	80007cc <MGPIO_vWritePinData>
	MGPIO_vWritePinData(LCD_D6,GET_BIT(Data,2));
 8000420:	79fb      	ldrb	r3, [r7, #7]
 8000422:	089b      	lsrs	r3, r3, #2
 8000424:	b2db      	uxtb	r3, r3
 8000426:	f003 0301 	and.w	r3, r3, #1
 800042a:	b2db      	uxtb	r3, r3
 800042c:	461a      	mov	r2, r3
 800042e:	2104      	movs	r1, #4
 8000430:	2000      	movs	r0, #0
 8000432:	f000 f9cb 	bl	80007cc <MGPIO_vWritePinData>
	MGPIO_vWritePinData(LCD_D7,GET_BIT(Data,3));
 8000436:	79fb      	ldrb	r3, [r7, #7]
 8000438:	08db      	lsrs	r3, r3, #3
 800043a:	b2db      	uxtb	r3, r3
 800043c:	f003 0301 	and.w	r3, r3, #1
 8000440:	b2db      	uxtb	r3, r3
 8000442:	461a      	mov	r2, r3
 8000444:	2105      	movs	r1, #5
 8000446:	2000      	movs	r0, #0
 8000448:	f000 f9c0 	bl	80007cc <MGPIO_vWritePinData>
	MGPIO_vWritePinData(EN,HIGH_STATE);
 800044c:	2201      	movs	r2, #1
 800044e:	2101      	movs	r1, #1
 8000450:	2000      	movs	r0, #0
 8000452:	f000 f9bb 	bl	80007cc <MGPIO_vWritePinData>
	Delay_vMilliSecond16MHzoscillator(2);
 8000456:	2002      	movs	r0, #2
 8000458:	f7ff febc 	bl	80001d4 <Delay_vMilliSecond16MHzoscillator>
	MGPIO_vWritePinData(EN,LOW_STATE);
 800045c:	2200      	movs	r2, #0
 800045e:	2101      	movs	r1, #1
 8000460:	2000      	movs	r0, #0
 8000462:	f000 f9b3 	bl	80007cc <MGPIO_vWritePinData>
	Delay_vMilliSecond16MHzoscillator(2);
 8000466:	2002      	movs	r0, #2
 8000468:	f7ff feb4 	bl	80001d4 <Delay_vMilliSecond16MHzoscillator>
}
 800046c:	bf00      	nop
 800046e:	3708      	adds	r7, #8
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}

08000474 <LCD_Init>:

void LCD_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
	Delay_vMilliSecond16MHzoscillator(50);
 8000478:	2032      	movs	r0, #50	; 0x32
 800047a:	f7ff feab 	bl	80001d4 <Delay_vMilliSecond16MHzoscillator>
	LCD_WriteCommand(0x02);//row 1 oring with row 2(function set 1)
 800047e:	2002      	movs	r0, #2
 8000480:	f7ff fef6 	bl	8000270 <LCD_WriteCommand>
	Delay_vMilliSecond16MHzoscillator(1);
 8000484:	2001      	movs	r0, #1
 8000486:	f7ff fea5 	bl	80001d4 <Delay_vMilliSecond16MHzoscillator>
	LCD_WriteCommand(0x28); //row 2 oring with row 3 after shifted by 4 to right(function set 2)
 800048a:	2028      	movs	r0, #40	; 0x28
 800048c:	f7ff fef0 	bl	8000270 <LCD_WriteCommand>
	Delay_vMilliSecond16MHzoscillator(1);
 8000490:	2001      	movs	r0, #1
 8000492:	f7ff fe9f 	bl	80001d4 <Delay_vMilliSecond16MHzoscillator>
	LCD_WriteCommand(0x0c); //row 1 oring with row 2 after shifted by 4 to right(display on off)
 8000496:	200c      	movs	r0, #12
 8000498:	f7ff feea 	bl	8000270 <LCD_WriteCommand>
	Delay_vMilliSecond16MHzoscillator(1);
 800049c:	2001      	movs	r0, #1
 800049e:	f7ff fe99 	bl	80001d4 <Delay_vMilliSecond16MHzoscillator>
	LCD_WriteCommand(0x01); //row 1 oring with row 2 after shifted by 4 to right(clear lcd)
 80004a2:	2001      	movs	r0, #1
 80004a4:	f7ff fee4 	bl	8000270 <LCD_WriteCommand>
	Delay_vMilliSecond16MHzoscillator(2);
 80004a8:	2002      	movs	r0, #2
 80004aa:	f7ff fe93 	bl	80001d4 <Delay_vMilliSecond16MHzoscillator>
	LCD_WriteCommand(0x06);//row 1 oring with row 2 after shifted by 4 to right(mode set)
 80004ae:	2006      	movs	r0, #6
 80004b0:	f7ff fede 	bl	8000270 <LCD_WriteCommand>
	Delay_vMilliSecond16MHzoscillator(2);
 80004b4:	2002      	movs	r0, #2
 80004b6:	f7ff fe8d 	bl	80001d4 <Delay_vMilliSecond16MHzoscillator>
}
 80004ba:	bf00      	nop
 80004bc:	bd80      	pop	{r7, pc}
	...

080004c0 <EXTI0_IRQHandler>:
{
	EXTI0_CallBack=Ptr0;
}

 void EXTI0_IRQHandler(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	SET_BIT(EXTI->PR,0U);
 80004c4:	4b05      	ldr	r3, [pc, #20]	; (80004dc <EXTI0_IRQHandler+0x1c>)
 80004c6:	695b      	ldr	r3, [r3, #20]
 80004c8:	4a04      	ldr	r2, [pc, #16]	; (80004dc <EXTI0_IRQHandler+0x1c>)
 80004ca:	f043 0301 	orr.w	r3, r3, #1
 80004ce:	6153      	str	r3, [r2, #20]
	EXTI0_CallBack();
 80004d0:	4b03      	ldr	r3, [pc, #12]	; (80004e0 <EXTI0_IRQHandler+0x20>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4798      	blx	r3
}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	40013c00 	.word	0x40013c00
 80004e0:	2000001c 	.word	0x2000001c

080004e4 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	SET_BIT(EXTI->PR,0U);
 80004e8:	4b05      	ldr	r3, [pc, #20]	; (8000500 <EXTI1_IRQHandler+0x1c>)
 80004ea:	695b      	ldr	r3, [r3, #20]
 80004ec:	4a04      	ldr	r2, [pc, #16]	; (8000500 <EXTI1_IRQHandler+0x1c>)
 80004ee:	f043 0301 	orr.w	r3, r3, #1
 80004f2:	6153      	str	r3, [r2, #20]
	EXTI1_CallBack();
 80004f4:	4b03      	ldr	r3, [pc, #12]	; (8000504 <EXTI1_IRQHandler+0x20>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4798      	blx	r3
}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40013c00 	.word	0x40013c00
 8000504:	20000020 	.word	0x20000020

08000508 <MGPIO_vSetPinMode>:
 */

#include "MCAL_GPIO_Interface.h"

void MGPIO_vSetPinMode(U8 PortName, U8 PinNum, U8 DirectionMode)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
 8000512:	460b      	mov	r3, r1
 8000514:	71bb      	strb	r3, [r7, #6]
 8000516:	4613      	mov	r3, r2
 8000518:	717b      	strb	r3, [r7, #5]
	/* INPUT_MODE, OUTPUT_MODE, ALTERNATE_FUNCTION_MODE, ANALOG_MODE */
	switch(PortName)
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	2b05      	cmp	r3, #5
 800051e:	d857      	bhi.n	80005d0 <MGPIO_vSetPinMode+0xc8>
 8000520:	a201      	add	r2, pc, #4	; (adr r2, 8000528 <MGPIO_vSetPinMode+0x20>)
 8000522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000526:	bf00      	nop
 8000528:	08000541 	.word	0x08000541
 800052c:	08000559 	.word	0x08000559
 8000530:	08000571 	.word	0x08000571
 8000534:	08000589 	.word	0x08000589
 8000538:	080005a1 	.word	0x080005a1
 800053c:	080005b9 	.word	0x080005b9
	{
	    //GIVE_BIT(GPIOA_SPTR->GPIO_MODER.RegisterAccess, 2U* PinNum, (U32)DirectionMode) ; break;
		case GPIOA_PORT :GPIOA_SPTR->GPIO_MODER.RegisterAccess |= (U32)(DirectionMode<<(2U* PinNum)) ; break;
 8000540:	4b27      	ldr	r3, [pc, #156]	; (80005e0 <MGPIO_vSetPinMode+0xd8>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	7979      	ldrb	r1, [r7, #5]
 8000546:	79ba      	ldrb	r2, [r7, #6]
 8000548:	0052      	lsls	r2, r2, #1
 800054a:	fa01 f202 	lsl.w	r2, r1, r2
 800054e:	4611      	mov	r1, r2
 8000550:	4a23      	ldr	r2, [pc, #140]	; (80005e0 <MGPIO_vSetPinMode+0xd8>)
 8000552:	430b      	orrs	r3, r1
 8000554:	6013      	str	r3, [r2, #0]
 8000556:	e03c      	b.n	80005d2 <MGPIO_vSetPinMode+0xca>
		case GPIOB_PORT :GPIOB_SPTR->GPIO_MODER.RegisterAccess |= (U32)(DirectionMode<<(2U* PinNum)) ; break;
 8000558:	4b22      	ldr	r3, [pc, #136]	; (80005e4 <MGPIO_vSetPinMode+0xdc>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	7979      	ldrb	r1, [r7, #5]
 800055e:	79ba      	ldrb	r2, [r7, #6]
 8000560:	0052      	lsls	r2, r2, #1
 8000562:	fa01 f202 	lsl.w	r2, r1, r2
 8000566:	4611      	mov	r1, r2
 8000568:	4a1e      	ldr	r2, [pc, #120]	; (80005e4 <MGPIO_vSetPinMode+0xdc>)
 800056a:	430b      	orrs	r3, r1
 800056c:	6013      	str	r3, [r2, #0]
 800056e:	e030      	b.n	80005d2 <MGPIO_vSetPinMode+0xca>
		case GPIOC_PORT :GPIOC_SPTR->GPIO_MODER.RegisterAccess |= (U32)(DirectionMode<<(2U* PinNum)) ; break;
 8000570:	4b1d      	ldr	r3, [pc, #116]	; (80005e8 <MGPIO_vSetPinMode+0xe0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	7979      	ldrb	r1, [r7, #5]
 8000576:	79ba      	ldrb	r2, [r7, #6]
 8000578:	0052      	lsls	r2, r2, #1
 800057a:	fa01 f202 	lsl.w	r2, r1, r2
 800057e:	4611      	mov	r1, r2
 8000580:	4a19      	ldr	r2, [pc, #100]	; (80005e8 <MGPIO_vSetPinMode+0xe0>)
 8000582:	430b      	orrs	r3, r1
 8000584:	6013      	str	r3, [r2, #0]
 8000586:	e024      	b.n	80005d2 <MGPIO_vSetPinMode+0xca>
		case GPIOD_PORT :GPIOD_SPTR->GPIO_MODER.RegisterAccess |= (U32)(DirectionMode<<(2U* PinNum)) ; break;
 8000588:	4b18      	ldr	r3, [pc, #96]	; (80005ec <MGPIO_vSetPinMode+0xe4>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	7979      	ldrb	r1, [r7, #5]
 800058e:	79ba      	ldrb	r2, [r7, #6]
 8000590:	0052      	lsls	r2, r2, #1
 8000592:	fa01 f202 	lsl.w	r2, r1, r2
 8000596:	4611      	mov	r1, r2
 8000598:	4a14      	ldr	r2, [pc, #80]	; (80005ec <MGPIO_vSetPinMode+0xe4>)
 800059a:	430b      	orrs	r3, r1
 800059c:	6013      	str	r3, [r2, #0]
 800059e:	e018      	b.n	80005d2 <MGPIO_vSetPinMode+0xca>
		case GPIOE_PORT :GPIOE_SPTR->GPIO_MODER.RegisterAccess |= (U32)(DirectionMode<<(2U* PinNum)) ; break;
 80005a0:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <MGPIO_vSetPinMode+0xe8>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	7979      	ldrb	r1, [r7, #5]
 80005a6:	79ba      	ldrb	r2, [r7, #6]
 80005a8:	0052      	lsls	r2, r2, #1
 80005aa:	fa01 f202 	lsl.w	r2, r1, r2
 80005ae:	4611      	mov	r1, r2
 80005b0:	4a0f      	ldr	r2, [pc, #60]	; (80005f0 <MGPIO_vSetPinMode+0xe8>)
 80005b2:	430b      	orrs	r3, r1
 80005b4:	6013      	str	r3, [r2, #0]
 80005b6:	e00c      	b.n	80005d2 <MGPIO_vSetPinMode+0xca>
		case GPIOH_PORT :GPIOH_SPTR->GPIO_MODER.RegisterAccess |= (U32)(DirectionMode<<(2U* PinNum)) ; break;
 80005b8:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <MGPIO_vSetPinMode+0xec>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	7979      	ldrb	r1, [r7, #5]
 80005be:	79ba      	ldrb	r2, [r7, #6]
 80005c0:	0052      	lsls	r2, r2, #1
 80005c2:	fa01 f202 	lsl.w	r2, r1, r2
 80005c6:	4611      	mov	r1, r2
 80005c8:	4a0a      	ldr	r2, [pc, #40]	; (80005f4 <MGPIO_vSetPinMode+0xec>)
 80005ca:	430b      	orrs	r3, r1
 80005cc:	6013      	str	r3, [r2, #0]
 80005ce:	e000      	b.n	80005d2 <MGPIO_vSetPinMode+0xca>
		default : /*ERROR*/ break ;
 80005d0:	bf00      	nop
    }
}
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	40020000 	.word	0x40020000
 80005e4:	40020400 	.word	0x40020400
 80005e8:	40020800 	.word	0x40020800
 80005ec:	40020c00 	.word	0x40020c00
 80005f0:	40021000 	.word	0x40021000
 80005f4:	40021c00 	.word	0x40021c00

080005f8 <MGPIO_vSetPinOutputType>:
		default : /*ERROR*/ break ;
    }
}

void MGPIO_vSetPinOutputType(U8 PortName, U8 PinNum, U8 OutPutType)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
 8000602:	460b      	mov	r3, r1
 8000604:	71bb      	strb	r3, [r7, #6]
 8000606:	4613      	mov	r3, r2
 8000608:	717b      	strb	r3, [r7, #5]
	/*OUTPUT_PUSH_PULL_TYPE, OUTPUT_OPEN_DRAIN_TYPE*/
	switch(PortName)
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	2b05      	cmp	r3, #5
 800060e:	d851      	bhi.n	80006b4 <MGPIO_vSetPinOutputType+0xbc>
 8000610:	a201      	add	r2, pc, #4	; (adr r2, 8000618 <MGPIO_vSetPinOutputType+0x20>)
 8000612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000616:	bf00      	nop
 8000618:	08000631 	.word	0x08000631
 800061c:	08000647 	.word	0x08000647
 8000620:	0800065d 	.word	0x0800065d
 8000624:	08000673 	.word	0x08000673
 8000628:	08000689 	.word	0x08000689
 800062c:	0800069f 	.word	0x0800069f
	{
		case GPIOA_PORT :GPIOA_SPTR->GPIO_OTYPER.RegisterAccess |= (U32)(OutPutType<<(PinNum)) ; break;
 8000630:	4b24      	ldr	r3, [pc, #144]	; (80006c4 <MGPIO_vSetPinOutputType+0xcc>)
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	7979      	ldrb	r1, [r7, #5]
 8000636:	79ba      	ldrb	r2, [r7, #6]
 8000638:	fa01 f202 	lsl.w	r2, r1, r2
 800063c:	4611      	mov	r1, r2
 800063e:	4a21      	ldr	r2, [pc, #132]	; (80006c4 <MGPIO_vSetPinOutputType+0xcc>)
 8000640:	430b      	orrs	r3, r1
 8000642:	6053      	str	r3, [r2, #4]
 8000644:	e037      	b.n	80006b6 <MGPIO_vSetPinOutputType+0xbe>
		case GPIOB_PORT :GPIOB_SPTR->GPIO_OTYPER.RegisterAccess |= (U32)(OutPutType<<(PinNum)) ; break;
 8000646:	4b20      	ldr	r3, [pc, #128]	; (80006c8 <MGPIO_vSetPinOutputType+0xd0>)
 8000648:	685b      	ldr	r3, [r3, #4]
 800064a:	7979      	ldrb	r1, [r7, #5]
 800064c:	79ba      	ldrb	r2, [r7, #6]
 800064e:	fa01 f202 	lsl.w	r2, r1, r2
 8000652:	4611      	mov	r1, r2
 8000654:	4a1c      	ldr	r2, [pc, #112]	; (80006c8 <MGPIO_vSetPinOutputType+0xd0>)
 8000656:	430b      	orrs	r3, r1
 8000658:	6053      	str	r3, [r2, #4]
 800065a:	e02c      	b.n	80006b6 <MGPIO_vSetPinOutputType+0xbe>
		case GPIOC_PORT :GPIOC_SPTR->GPIO_OTYPER.RegisterAccess |= (U32)(OutPutType<<(PinNum)) ; break;
 800065c:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <MGPIO_vSetPinOutputType+0xd4>)
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	7979      	ldrb	r1, [r7, #5]
 8000662:	79ba      	ldrb	r2, [r7, #6]
 8000664:	fa01 f202 	lsl.w	r2, r1, r2
 8000668:	4611      	mov	r1, r2
 800066a:	4a18      	ldr	r2, [pc, #96]	; (80006cc <MGPIO_vSetPinOutputType+0xd4>)
 800066c:	430b      	orrs	r3, r1
 800066e:	6053      	str	r3, [r2, #4]
 8000670:	e021      	b.n	80006b6 <MGPIO_vSetPinOutputType+0xbe>
		case GPIOD_PORT :GPIOD_SPTR->GPIO_OTYPER.RegisterAccess |= (U32)(OutPutType<<(PinNum)) ; break;
 8000672:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <MGPIO_vSetPinOutputType+0xd8>)
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	7979      	ldrb	r1, [r7, #5]
 8000678:	79ba      	ldrb	r2, [r7, #6]
 800067a:	fa01 f202 	lsl.w	r2, r1, r2
 800067e:	4611      	mov	r1, r2
 8000680:	4a13      	ldr	r2, [pc, #76]	; (80006d0 <MGPIO_vSetPinOutputType+0xd8>)
 8000682:	430b      	orrs	r3, r1
 8000684:	6053      	str	r3, [r2, #4]
 8000686:	e016      	b.n	80006b6 <MGPIO_vSetPinOutputType+0xbe>
		case GPIOE_PORT :GPIOE_SPTR->GPIO_OTYPER.RegisterAccess |= (U32)(OutPutType<<(PinNum)) ; break;
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <MGPIO_vSetPinOutputType+0xdc>)
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	7979      	ldrb	r1, [r7, #5]
 800068e:	79ba      	ldrb	r2, [r7, #6]
 8000690:	fa01 f202 	lsl.w	r2, r1, r2
 8000694:	4611      	mov	r1, r2
 8000696:	4a0f      	ldr	r2, [pc, #60]	; (80006d4 <MGPIO_vSetPinOutputType+0xdc>)
 8000698:	430b      	orrs	r3, r1
 800069a:	6053      	str	r3, [r2, #4]
 800069c:	e00b      	b.n	80006b6 <MGPIO_vSetPinOutputType+0xbe>
		case GPIOH_PORT :GPIOH_SPTR->GPIO_OTYPER.RegisterAccess |= (U32)(OutPutType<<(PinNum)) ; break;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MGPIO_vSetPinOutputType+0xe0>)
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	7979      	ldrb	r1, [r7, #5]
 80006a4:	79ba      	ldrb	r2, [r7, #6]
 80006a6:	fa01 f202 	lsl.w	r2, r1, r2
 80006aa:	4611      	mov	r1, r2
 80006ac:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <MGPIO_vSetPinOutputType+0xe0>)
 80006ae:	430b      	orrs	r3, r1
 80006b0:	6053      	str	r3, [r2, #4]
 80006b2:	e000      	b.n	80006b6 <MGPIO_vSetPinOutputType+0xbe>
		default : /*ERROR*/ break ;
 80006b4:	bf00      	nop
     }
}
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	40020000 	.word	0x40020000
 80006c8:	40020400 	.word	0x40020400
 80006cc:	40020800 	.word	0x40020800
 80006d0:	40020c00 	.word	0x40020c00
 80006d4:	40021000 	.word	0x40021000
 80006d8:	40021c00 	.word	0x40021c00

080006dc <MGPIO_vSetPinOutputSpeed>:

void MGPIO_vSetPinOutputSpeed(U8 PortName, U8 PinNum, U8 OutputSpeed)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
 80006e6:	460b      	mov	r3, r1
 80006e8:	71bb      	strb	r3, [r7, #6]
 80006ea:	4613      	mov	r3, r2
 80006ec:	717b      	strb	r3, [r7, #5]
	/*OUTPUT_LOW_SPEED, OUTPUT_MEDUIM_SPEED, OUTPUT_HIGH_SPEED, OUTPUT_VERY_HIGH_SPEED*/
	switch(PortName)
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	2b05      	cmp	r3, #5
 80006f2:	d857      	bhi.n	80007a4 <MGPIO_vSetPinOutputSpeed+0xc8>
 80006f4:	a201      	add	r2, pc, #4	; (adr r2, 80006fc <MGPIO_vSetPinOutputSpeed+0x20>)
 80006f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fa:	bf00      	nop
 80006fc:	08000715 	.word	0x08000715
 8000700:	0800072d 	.word	0x0800072d
 8000704:	08000745 	.word	0x08000745
 8000708:	0800075d 	.word	0x0800075d
 800070c:	08000775 	.word	0x08000775
 8000710:	0800078d 	.word	0x0800078d
	{
		case GPIOA_PORT :GPIOA_SPTR->GPIO_OSPEEDR.RegisterAccess |= (U32)(OutputSpeed<<(2U* PinNum)) ; break;
 8000714:	4b27      	ldr	r3, [pc, #156]	; (80007b4 <MGPIO_vSetPinOutputSpeed+0xd8>)
 8000716:	689b      	ldr	r3, [r3, #8]
 8000718:	7979      	ldrb	r1, [r7, #5]
 800071a:	79ba      	ldrb	r2, [r7, #6]
 800071c:	0052      	lsls	r2, r2, #1
 800071e:	fa01 f202 	lsl.w	r2, r1, r2
 8000722:	4611      	mov	r1, r2
 8000724:	4a23      	ldr	r2, [pc, #140]	; (80007b4 <MGPIO_vSetPinOutputSpeed+0xd8>)
 8000726:	430b      	orrs	r3, r1
 8000728:	6093      	str	r3, [r2, #8]
 800072a:	e03c      	b.n	80007a6 <MGPIO_vSetPinOutputSpeed+0xca>
		case GPIOB_PORT :GPIOB_SPTR->GPIO_OSPEEDR.RegisterAccess |= (U32)(OutputSpeed<<(2U* PinNum)) ; break;
 800072c:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <MGPIO_vSetPinOutputSpeed+0xdc>)
 800072e:	689b      	ldr	r3, [r3, #8]
 8000730:	7979      	ldrb	r1, [r7, #5]
 8000732:	79ba      	ldrb	r2, [r7, #6]
 8000734:	0052      	lsls	r2, r2, #1
 8000736:	fa01 f202 	lsl.w	r2, r1, r2
 800073a:	4611      	mov	r1, r2
 800073c:	4a1e      	ldr	r2, [pc, #120]	; (80007b8 <MGPIO_vSetPinOutputSpeed+0xdc>)
 800073e:	430b      	orrs	r3, r1
 8000740:	6093      	str	r3, [r2, #8]
 8000742:	e030      	b.n	80007a6 <MGPIO_vSetPinOutputSpeed+0xca>
		case GPIOC_PORT :GPIOC_SPTR->GPIO_OSPEEDR.RegisterAccess |= (U32)(OutputSpeed<<(2U* PinNum)) ; break;
 8000744:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <MGPIO_vSetPinOutputSpeed+0xe0>)
 8000746:	689b      	ldr	r3, [r3, #8]
 8000748:	7979      	ldrb	r1, [r7, #5]
 800074a:	79ba      	ldrb	r2, [r7, #6]
 800074c:	0052      	lsls	r2, r2, #1
 800074e:	fa01 f202 	lsl.w	r2, r1, r2
 8000752:	4611      	mov	r1, r2
 8000754:	4a19      	ldr	r2, [pc, #100]	; (80007bc <MGPIO_vSetPinOutputSpeed+0xe0>)
 8000756:	430b      	orrs	r3, r1
 8000758:	6093      	str	r3, [r2, #8]
 800075a:	e024      	b.n	80007a6 <MGPIO_vSetPinOutputSpeed+0xca>
		case GPIOD_PORT :GPIOD_SPTR->GPIO_OSPEEDR.RegisterAccess |= (U32)(OutputSpeed<<(2U* PinNum)) ; break;
 800075c:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <MGPIO_vSetPinOutputSpeed+0xe4>)
 800075e:	689b      	ldr	r3, [r3, #8]
 8000760:	7979      	ldrb	r1, [r7, #5]
 8000762:	79ba      	ldrb	r2, [r7, #6]
 8000764:	0052      	lsls	r2, r2, #1
 8000766:	fa01 f202 	lsl.w	r2, r1, r2
 800076a:	4611      	mov	r1, r2
 800076c:	4a14      	ldr	r2, [pc, #80]	; (80007c0 <MGPIO_vSetPinOutputSpeed+0xe4>)
 800076e:	430b      	orrs	r3, r1
 8000770:	6093      	str	r3, [r2, #8]
 8000772:	e018      	b.n	80007a6 <MGPIO_vSetPinOutputSpeed+0xca>
		case GPIOE_PORT :GPIOE_SPTR->GPIO_OSPEEDR.RegisterAccess |= (U32)(OutputSpeed<<(2U* PinNum)) ; break;
 8000774:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <MGPIO_vSetPinOutputSpeed+0xe8>)
 8000776:	689b      	ldr	r3, [r3, #8]
 8000778:	7979      	ldrb	r1, [r7, #5]
 800077a:	79ba      	ldrb	r2, [r7, #6]
 800077c:	0052      	lsls	r2, r2, #1
 800077e:	fa01 f202 	lsl.w	r2, r1, r2
 8000782:	4611      	mov	r1, r2
 8000784:	4a0f      	ldr	r2, [pc, #60]	; (80007c4 <MGPIO_vSetPinOutputSpeed+0xe8>)
 8000786:	430b      	orrs	r3, r1
 8000788:	6093      	str	r3, [r2, #8]
 800078a:	e00c      	b.n	80007a6 <MGPIO_vSetPinOutputSpeed+0xca>
		case GPIOH_PORT :GPIOH_SPTR->GPIO_OSPEEDR.RegisterAccess |= (U32)(OutputSpeed<<(2U* PinNum)) ; break;
 800078c:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MGPIO_vSetPinOutputSpeed+0xec>)
 800078e:	689b      	ldr	r3, [r3, #8]
 8000790:	7979      	ldrb	r1, [r7, #5]
 8000792:	79ba      	ldrb	r2, [r7, #6]
 8000794:	0052      	lsls	r2, r2, #1
 8000796:	fa01 f202 	lsl.w	r2, r1, r2
 800079a:	4611      	mov	r1, r2
 800079c:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <MGPIO_vSetPinOutputSpeed+0xec>)
 800079e:	430b      	orrs	r3, r1
 80007a0:	6093      	str	r3, [r2, #8]
 80007a2:	e000      	b.n	80007a6 <MGPIO_vSetPinOutputSpeed+0xca>
		default : /*ERROR*/ break ;
 80007a4:	bf00      	nop
	}
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40020000 	.word	0x40020000
 80007b8:	40020400 	.word	0x40020400
 80007bc:	40020800 	.word	0x40020800
 80007c0:	40020c00 	.word	0x40020c00
 80007c4:	40021000 	.word	0x40021000
 80007c8:	40021c00 	.word	0x40021c00

080007cc <MGPIO_vWritePinData>:
	}
	return L_U8Pin_Read_Data;
}

void MGPIO_vWritePinData(U8 PortName, U8 PinNum, U8 OutputState)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
 80007d6:	460b      	mov	r3, r1
 80007d8:	71bb      	strb	r3, [r7, #6]
 80007da:	4613      	mov	r3, r2
 80007dc:	717b      	strb	r3, [r7, #5]
	/*LOW_STATE, HIGH_STATE*/
	switch(OutputState)
 80007de:	797b      	ldrb	r3, [r7, #5]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d002      	beq.n	80007ea <MGPIO_vWritePinData+0x1e>
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d05d      	beq.n	80008a4 <MGPIO_vWritePinData+0xd8>
				case GPIOE_PORT :SET_BIT(GPIOE_SPTR->GPIO_ODR.RegisterAccess, PinNum); ; break;
				case GPIOH_PORT :SET_BIT(GPIOH_SPTR->GPIO_ODR.RegisterAccess, PinNum); ; break;
				default : /*ERROR*/ break ;
			}
		break ;
		default : /*ERROR*/ break ;
 80007e8:	e0b2      	b.n	8000950 <MGPIO_vWritePinData+0x184>
			switch(PortName)
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	2b05      	cmp	r3, #5
 80007ee:	d857      	bhi.n	80008a0 <MGPIO_vWritePinData+0xd4>
 80007f0:	a201      	add	r2, pc, #4	; (adr r2, 80007f8 <MGPIO_vWritePinData+0x2c>)
 80007f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007f6:	bf00      	nop
 80007f8:	08000811 	.word	0x08000811
 80007fc:	08000829 	.word	0x08000829
 8000800:	08000841 	.word	0x08000841
 8000804:	08000859 	.word	0x08000859
 8000808:	08000871 	.word	0x08000871
 800080c:	08000889 	.word	0x08000889
				case GPIOA_PORT :CLR_BIT(GPIOA_SPTR->GPIO_ODR.RegisterAccess, PinNum); break;
 8000810:	4b52      	ldr	r3, [pc, #328]	; (800095c <MGPIO_vWritePinData+0x190>)
 8000812:	695b      	ldr	r3, [r3, #20]
 8000814:	79ba      	ldrb	r2, [r7, #6]
 8000816:	2101      	movs	r1, #1
 8000818:	fa01 f202 	lsl.w	r2, r1, r2
 800081c:	43d2      	mvns	r2, r2
 800081e:	4611      	mov	r1, r2
 8000820:	4a4e      	ldr	r2, [pc, #312]	; (800095c <MGPIO_vWritePinData+0x190>)
 8000822:	400b      	ands	r3, r1
 8000824:	6153      	str	r3, [r2, #20]
 8000826:	e03c      	b.n	80008a2 <MGPIO_vWritePinData+0xd6>
				case GPIOB_PORT :CLR_BIT(GPIOB_SPTR->GPIO_ODR.RegisterAccess, PinNum); break;
 8000828:	4b4d      	ldr	r3, [pc, #308]	; (8000960 <MGPIO_vWritePinData+0x194>)
 800082a:	695b      	ldr	r3, [r3, #20]
 800082c:	79ba      	ldrb	r2, [r7, #6]
 800082e:	2101      	movs	r1, #1
 8000830:	fa01 f202 	lsl.w	r2, r1, r2
 8000834:	43d2      	mvns	r2, r2
 8000836:	4611      	mov	r1, r2
 8000838:	4a49      	ldr	r2, [pc, #292]	; (8000960 <MGPIO_vWritePinData+0x194>)
 800083a:	400b      	ands	r3, r1
 800083c:	6153      	str	r3, [r2, #20]
 800083e:	e030      	b.n	80008a2 <MGPIO_vWritePinData+0xd6>
				case GPIOC_PORT :CLR_BIT(GPIOC_SPTR->GPIO_ODR.RegisterAccess, PinNum); break;
 8000840:	4b48      	ldr	r3, [pc, #288]	; (8000964 <MGPIO_vWritePinData+0x198>)
 8000842:	695b      	ldr	r3, [r3, #20]
 8000844:	79ba      	ldrb	r2, [r7, #6]
 8000846:	2101      	movs	r1, #1
 8000848:	fa01 f202 	lsl.w	r2, r1, r2
 800084c:	43d2      	mvns	r2, r2
 800084e:	4611      	mov	r1, r2
 8000850:	4a44      	ldr	r2, [pc, #272]	; (8000964 <MGPIO_vWritePinData+0x198>)
 8000852:	400b      	ands	r3, r1
 8000854:	6153      	str	r3, [r2, #20]
 8000856:	e024      	b.n	80008a2 <MGPIO_vWritePinData+0xd6>
				case GPIOD_PORT :CLR_BIT(GPIOD_SPTR->GPIO_ODR.RegisterAccess, PinNum); break;
 8000858:	4b43      	ldr	r3, [pc, #268]	; (8000968 <MGPIO_vWritePinData+0x19c>)
 800085a:	695b      	ldr	r3, [r3, #20]
 800085c:	79ba      	ldrb	r2, [r7, #6]
 800085e:	2101      	movs	r1, #1
 8000860:	fa01 f202 	lsl.w	r2, r1, r2
 8000864:	43d2      	mvns	r2, r2
 8000866:	4611      	mov	r1, r2
 8000868:	4a3f      	ldr	r2, [pc, #252]	; (8000968 <MGPIO_vWritePinData+0x19c>)
 800086a:	400b      	ands	r3, r1
 800086c:	6153      	str	r3, [r2, #20]
 800086e:	e018      	b.n	80008a2 <MGPIO_vWritePinData+0xd6>
				case GPIOE_PORT :CLR_BIT(GPIOE_SPTR->GPIO_ODR.RegisterAccess, PinNum); break;
 8000870:	4b3e      	ldr	r3, [pc, #248]	; (800096c <MGPIO_vWritePinData+0x1a0>)
 8000872:	695b      	ldr	r3, [r3, #20]
 8000874:	79ba      	ldrb	r2, [r7, #6]
 8000876:	2101      	movs	r1, #1
 8000878:	fa01 f202 	lsl.w	r2, r1, r2
 800087c:	43d2      	mvns	r2, r2
 800087e:	4611      	mov	r1, r2
 8000880:	4a3a      	ldr	r2, [pc, #232]	; (800096c <MGPIO_vWritePinData+0x1a0>)
 8000882:	400b      	ands	r3, r1
 8000884:	6153      	str	r3, [r2, #20]
 8000886:	e00c      	b.n	80008a2 <MGPIO_vWritePinData+0xd6>
				case GPIOH_PORT :CLR_BIT(GPIOH_SPTR->GPIO_ODR.RegisterAccess, PinNum); break;
 8000888:	4b39      	ldr	r3, [pc, #228]	; (8000970 <MGPIO_vWritePinData+0x1a4>)
 800088a:	695b      	ldr	r3, [r3, #20]
 800088c:	79ba      	ldrb	r2, [r7, #6]
 800088e:	2101      	movs	r1, #1
 8000890:	fa01 f202 	lsl.w	r2, r1, r2
 8000894:	43d2      	mvns	r2, r2
 8000896:	4611      	mov	r1, r2
 8000898:	4a35      	ldr	r2, [pc, #212]	; (8000970 <MGPIO_vWritePinData+0x1a4>)
 800089a:	400b      	ands	r3, r1
 800089c:	6153      	str	r3, [r2, #20]
 800089e:	e000      	b.n	80008a2 <MGPIO_vWritePinData+0xd6>
				default : /*ERROR*/ break ;
 80008a0:	bf00      	nop
		break ;
 80008a2:	e055      	b.n	8000950 <MGPIO_vWritePinData+0x184>
			switch(PortName)
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	2b05      	cmp	r3, #5
 80008a8:	d850      	bhi.n	800094c <MGPIO_vWritePinData+0x180>
 80008aa:	a201      	add	r2, pc, #4	; (adr r2, 80008b0 <MGPIO_vWritePinData+0xe4>)
 80008ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b0:	080008c9 	.word	0x080008c9
 80008b4:	080008df 	.word	0x080008df
 80008b8:	080008f5 	.word	0x080008f5
 80008bc:	0800090b 	.word	0x0800090b
 80008c0:	08000921 	.word	0x08000921
 80008c4:	08000937 	.word	0x08000937
				case GPIOA_PORT :SET_BIT(GPIOA_SPTR->GPIO_ODR.RegisterAccess, PinNum); ; break;
 80008c8:	4b24      	ldr	r3, [pc, #144]	; (800095c <MGPIO_vWritePinData+0x190>)
 80008ca:	695b      	ldr	r3, [r3, #20]
 80008cc:	79ba      	ldrb	r2, [r7, #6]
 80008ce:	2101      	movs	r1, #1
 80008d0:	fa01 f202 	lsl.w	r2, r1, r2
 80008d4:	4611      	mov	r1, r2
 80008d6:	4a21      	ldr	r2, [pc, #132]	; (800095c <MGPIO_vWritePinData+0x190>)
 80008d8:	430b      	orrs	r3, r1
 80008da:	6153      	str	r3, [r2, #20]
 80008dc:	e037      	b.n	800094e <MGPIO_vWritePinData+0x182>
				case GPIOB_PORT :SET_BIT(GPIOB_SPTR->GPIO_ODR.RegisterAccess, PinNum); ; break;
 80008de:	4b20      	ldr	r3, [pc, #128]	; (8000960 <MGPIO_vWritePinData+0x194>)
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	79ba      	ldrb	r2, [r7, #6]
 80008e4:	2101      	movs	r1, #1
 80008e6:	fa01 f202 	lsl.w	r2, r1, r2
 80008ea:	4611      	mov	r1, r2
 80008ec:	4a1c      	ldr	r2, [pc, #112]	; (8000960 <MGPIO_vWritePinData+0x194>)
 80008ee:	430b      	orrs	r3, r1
 80008f0:	6153      	str	r3, [r2, #20]
 80008f2:	e02c      	b.n	800094e <MGPIO_vWritePinData+0x182>
				case GPIOC_PORT :SET_BIT(GPIOC_SPTR->GPIO_ODR.RegisterAccess, PinNum); ; break;
 80008f4:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <MGPIO_vWritePinData+0x198>)
 80008f6:	695b      	ldr	r3, [r3, #20]
 80008f8:	79ba      	ldrb	r2, [r7, #6]
 80008fa:	2101      	movs	r1, #1
 80008fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000900:	4611      	mov	r1, r2
 8000902:	4a18      	ldr	r2, [pc, #96]	; (8000964 <MGPIO_vWritePinData+0x198>)
 8000904:	430b      	orrs	r3, r1
 8000906:	6153      	str	r3, [r2, #20]
 8000908:	e021      	b.n	800094e <MGPIO_vWritePinData+0x182>
				case GPIOD_PORT :SET_BIT(GPIOD_SPTR->GPIO_ODR.RegisterAccess, PinNum); ; break;
 800090a:	4b17      	ldr	r3, [pc, #92]	; (8000968 <MGPIO_vWritePinData+0x19c>)
 800090c:	695b      	ldr	r3, [r3, #20]
 800090e:	79ba      	ldrb	r2, [r7, #6]
 8000910:	2101      	movs	r1, #1
 8000912:	fa01 f202 	lsl.w	r2, r1, r2
 8000916:	4611      	mov	r1, r2
 8000918:	4a13      	ldr	r2, [pc, #76]	; (8000968 <MGPIO_vWritePinData+0x19c>)
 800091a:	430b      	orrs	r3, r1
 800091c:	6153      	str	r3, [r2, #20]
 800091e:	e016      	b.n	800094e <MGPIO_vWritePinData+0x182>
				case GPIOE_PORT :SET_BIT(GPIOE_SPTR->GPIO_ODR.RegisterAccess, PinNum); ; break;
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <MGPIO_vWritePinData+0x1a0>)
 8000922:	695b      	ldr	r3, [r3, #20]
 8000924:	79ba      	ldrb	r2, [r7, #6]
 8000926:	2101      	movs	r1, #1
 8000928:	fa01 f202 	lsl.w	r2, r1, r2
 800092c:	4611      	mov	r1, r2
 800092e:	4a0f      	ldr	r2, [pc, #60]	; (800096c <MGPIO_vWritePinData+0x1a0>)
 8000930:	430b      	orrs	r3, r1
 8000932:	6153      	str	r3, [r2, #20]
 8000934:	e00b      	b.n	800094e <MGPIO_vWritePinData+0x182>
				case GPIOH_PORT :SET_BIT(GPIOH_SPTR->GPIO_ODR.RegisterAccess, PinNum); ; break;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MGPIO_vWritePinData+0x1a4>)
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	79ba      	ldrb	r2, [r7, #6]
 800093c:	2101      	movs	r1, #1
 800093e:	fa01 f202 	lsl.w	r2, r1, r2
 8000942:	4611      	mov	r1, r2
 8000944:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <MGPIO_vWritePinData+0x1a4>)
 8000946:	430b      	orrs	r3, r1
 8000948:	6153      	str	r3, [r2, #20]
 800094a:	e000      	b.n	800094e <MGPIO_vWritePinData+0x182>
				default : /*ERROR*/ break ;
 800094c:	bf00      	nop
		break ;
 800094e:	bf00      	nop
	}
}
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	40020000 	.word	0x40020000
 8000960:	40020400 	.word	0x40020400
 8000964:	40020800 	.word	0x40020800
 8000968:	40020c00 	.word	0x40020c00
 800096c:	40021000 	.word	0x40021000
 8000970:	40021c00 	.word	0x40021c00

08000974 <MRCC_vInitSystemClock>:


#include "MCAL_RCC_Interface.h"

void MRCC_vInitSystemClock(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
	CLR_BIT(RCC_SPTR->REG_RCC_CR.RegisterAccess, CR_HSION);
 8000978:	4b14      	ldr	r3, [pc, #80]	; (80009cc <MRCC_vInitSystemClock+0x58>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a13      	ldr	r2, [pc, #76]	; (80009cc <MRCC_vInitSystemClock+0x58>)
 800097e:	f023 0301 	bic.w	r3, r3, #1
 8000982:	6013      	str	r3, [r2, #0]
    CLR_BIT(RCC_SPTR->REG_RCC_CR.RegisterAccess, CR_HSEON);
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MRCC_vInitSystemClock+0x58>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a10      	ldr	r2, [pc, #64]	; (80009cc <MRCC_vInitSystemClock+0x58>)
 800098a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800098e:	6013      	str	r3, [r2, #0]
    CLR_BIT(RCC_SPTR->REG_RCC_CR.RegisterAccess, CR_PLLON);
 8000990:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MRCC_vInitSystemClock+0x58>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a0d      	ldr	r2, [pc, #52]	; (80009cc <MRCC_vInitSystemClock+0x58>)
 8000996:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800099a:	6013      	str	r3, [r2, #0]
	#if CLOCK_SOURCE == HSI		/** HSI oscillator selected as system clock**********/
		/* 1- CLK SYS --> HSI */
		CLR_BIT(RCC_SPTR->REG_RCC_CFGR.RegisterAccess, CFGR_SW0);
 800099c:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MRCC_vInitSystemClock+0x58>)
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <MRCC_vInitSystemClock+0x58>)
 80009a2:	f023 0301 	bic.w	r3, r3, #1
 80009a6:	6093      	str	r3, [r2, #8]
		CLR_BIT(RCC_SPTR->REG_RCC_CFGR.RegisterAccess, CFGR_SW1);
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <MRCC_vInitSystemClock+0x58>)
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	4a07      	ldr	r2, [pc, #28]	; (80009cc <MRCC_vInitSystemClock+0x58>)
 80009ae:	f023 0302 	bic.w	r3, r3, #2
 80009b2:	6093      	str	r3, [r2, #8]
		/* 2- EN HSI*/
		SET_BIT(RCC_SPTR->REG_RCC_CR.RegisterAccess, CR_HSION);
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <MRCC_vInitSystemClock+0x58>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a04      	ldr	r2, [pc, #16]	; (80009cc <MRCC_vInitSystemClock+0x58>)
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	6013      	str	r3, [r2, #0]
			/* Error*/
		#endif
	#else
		/* Error*/
	#endif
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800

080009d0 <MRCC_vEnableBusClock>:

void MRCC_vEnableBusClock(U8 AxBxENR_RCC_Bus ,U8 Peripheral_PPxx)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	460a      	mov	r2, r1
 80009da:	71fb      	strb	r3, [r7, #7]
 80009dc:	4613      	mov	r3, r2
 80009de:	71bb      	strb	r3, [r7, #6]
	switch(AxBxENR_RCC_Bus)
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	2b03      	cmp	r3, #3
 80009e4:	d836      	bhi.n	8000a54 <MRCC_vEnableBusClock+0x84>
 80009e6:	a201      	add	r2, pc, #4	; (adr r2, 80009ec <MRCC_vEnableBusClock+0x1c>)
 80009e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ec:	080009fd 	.word	0x080009fd
 80009f0:	08000a13 	.word	0x08000a13
 80009f4:	08000a29 	.word	0x08000a29
 80009f8:	08000a3f 	.word	0x08000a3f
	{
		case Bus_AHB1:
			SET_BIT(RCC_SPTR->REG_RCC_AHB1ENR.RegisterAccess, Peripheral_PPxx);  break ;
 80009fc:	4b19      	ldr	r3, [pc, #100]	; (8000a64 <MRCC_vEnableBusClock+0x94>)
 80009fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a00:	79ba      	ldrb	r2, [r7, #6]
 8000a02:	2101      	movs	r1, #1
 8000a04:	fa01 f202 	lsl.w	r2, r1, r2
 8000a08:	4611      	mov	r1, r2
 8000a0a:	4a16      	ldr	r2, [pc, #88]	; (8000a64 <MRCC_vEnableBusClock+0x94>)
 8000a0c:	430b      	orrs	r3, r1
 8000a0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a10:	e021      	b.n	8000a56 <MRCC_vEnableBusClock+0x86>
		case Bus_AHB2:
			SET_BIT(RCC_SPTR->REG_RCC_AHB2ENR.RegisterAccess, Peripheral_PPxx);  break ;
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MRCC_vEnableBusClock+0x94>)
 8000a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a16:	79ba      	ldrb	r2, [r7, #6]
 8000a18:	2101      	movs	r1, #1
 8000a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a1e:	4611      	mov	r1, r2
 8000a20:	4a10      	ldr	r2, [pc, #64]	; (8000a64 <MRCC_vEnableBusClock+0x94>)
 8000a22:	430b      	orrs	r3, r1
 8000a24:	6353      	str	r3, [r2, #52]	; 0x34
 8000a26:	e016      	b.n	8000a56 <MRCC_vEnableBusClock+0x86>
		case Bus_APB1:
			SET_BIT(RCC_SPTR->REG_RCC_APB1ENR.RegisterAccess, Peripheral_PPxx);  break ;
 8000a28:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <MRCC_vEnableBusClock+0x94>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2c:	79ba      	ldrb	r2, [r7, #6]
 8000a2e:	2101      	movs	r1, #1
 8000a30:	fa01 f202 	lsl.w	r2, r1, r2
 8000a34:	4611      	mov	r1, r2
 8000a36:	4a0b      	ldr	r2, [pc, #44]	; (8000a64 <MRCC_vEnableBusClock+0x94>)
 8000a38:	430b      	orrs	r3, r1
 8000a3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3c:	e00b      	b.n	8000a56 <MRCC_vEnableBusClock+0x86>
		case Bus_APB2:
			SET_BIT(RCC_SPTR->REG_RCC_APB2ENR.RegisterAccess, Peripheral_PPxx);  break ;
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MRCC_vEnableBusClock+0x94>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	79ba      	ldrb	r2, [r7, #6]
 8000a44:	2101      	movs	r1, #1
 8000a46:	fa01 f202 	lsl.w	r2, r1, r2
 8000a4a:	4611      	mov	r1, r2
 8000a4c:	4a05      	ldr	r2, [pc, #20]	; (8000a64 <MRCC_vEnableBusClock+0x94>)
 8000a4e:	430b      	orrs	r3, r1
 8000a50:	6453      	str	r3, [r2, #68]	; 0x44
 8000a52:	e000      	b.n	8000a56 <MRCC_vEnableBusClock+0x86>
		default :        /************ERROR*/             				break ;
 8000a54:	bf00      	nop
	}
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800

08000a68 <STK_Init>:
static volatile U8 STK_CallBackMode;
static volatile U8 G_u8ReadFlag;
static U32 counter;
/*====================================================   Start_FUNCTION   ====================================================*/
void STK_Init(STK_CLK_SRC_t STK_CLK_SRC)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
	/*Clear Val & Count flag*/
	STK->VAL =0;
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <STK_Init+0x48>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
	/*Select CLK Source*/
	switch(STK_CLK_SRC)
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d002      	beq.n	8000a84 <STK_Init+0x1c>
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d008      	beq.n	8000a94 <STK_Init+0x2c>
		break;
	case STK_CLK_SRC_HCLK_Div8:
		STK->CTRL = 0;
		STK_CLK_Ms_Ticks=2000U;
		break;
	default :/*error*/	break;
 8000a82:	e00f      	b.n	8000aa4 <STK_Init+0x3c>
		STK->CTRL = 0x00000004;
 8000a84:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <STK_Init+0x48>)
 8000a86:	2204      	movs	r2, #4
 8000a88:	601a      	str	r2, [r3, #0]
		STK_CLK_Ms_Ticks=16000U;
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <STK_Init+0x4c>)
 8000a8c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000a90:	601a      	str	r2, [r3, #0]
		break;
 8000a92:	e007      	b.n	8000aa4 <STK_Init+0x3c>
		STK->CTRL = 0;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <STK_Init+0x48>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
		STK_CLK_Ms_Ticks=2000U;
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <STK_Init+0x4c>)
 8000a9c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000aa0:	601a      	str	r2, [r3, #0]
		break;
 8000aa2:	bf00      	nop
	}
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	e000e010 	.word	0xe000e010
 8000ab4:	20000024 	.word	0x20000024

08000ab8 <SysTick_Handler>:

}
/*====================================================   Start_FUNCTION   ====================================================*/

void SysTick_Handler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	if(STK_CallBackMode != PWM)
 8000abc:	4b24      	ldr	r3, [pc, #144]	; (8000b50 <SysTick_Handler+0x98>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	2b02      	cmp	r3, #2
 8000ac4:	d01a      	beq.n	8000afc <SysTick_Handler+0x44>
	{
		if(STK_CallBackMode == ONE_TIME)
 8000ac6:	4b22      	ldr	r3, [pc, #136]	; (8000b50 <SysTick_Handler+0x98>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d111      	bne.n	8000af4 <SysTick_Handler+0x3c>
		{
			STK->CTRL &=~ STK_CTRL_ENABLE;
 8000ad0:	4b20      	ldr	r3, [pc, #128]	; (8000b54 <SysTick_Handler+0x9c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a1f      	ldr	r2, [pc, #124]	; (8000b54 <SysTick_Handler+0x9c>)
 8000ad6:	f023 0301 	bic.w	r3, r3, #1
 8000ada:	6013      	str	r3, [r2, #0]
			STK->LOAD=0;
 8000adc:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <SysTick_Handler+0x9c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	605a      	str	r2, [r3, #4]
			STK->VAL=0;
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <SysTick_Handler+0x9c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
			STK->CTRL &=~ STK_CTRL_TICKINT;
 8000ae8:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <SysTick_Handler+0x9c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a19      	ldr	r2, [pc, #100]	; (8000b54 <SysTick_Handler+0x9c>)
 8000aee:	f023 0302 	bic.w	r3, r3, #2
 8000af2:	6013      	str	r3, [r2, #0]
		}
		STK_pAppFun();
 8000af4:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <SysTick_Handler+0xa0>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4798      	blx	r3
 8000afa:	e01d      	b.n	8000b38 <SysTick_Handler+0x80>
	}else
	{
		counter++;
 8000afc:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <SysTick_Handler+0xa4>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	3301      	adds	r3, #1
 8000b02:	4a16      	ldr	r2, [pc, #88]	; (8000b5c <SysTick_Handler+0xa4>)
 8000b04:	6013      	str	r3, [r2, #0]
		if(counter == (STK_RequiredOnTime))
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <SysTick_Handler+0xa4>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <SysTick_Handler+0xa8>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d103      	bne.n	8000b1a <SysTick_Handler+0x62>
		{
			STK_pAppFun();
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <SysTick_Handler+0xa0>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4798      	blx	r3
 8000b18:	e00e      	b.n	8000b38 <SysTick_Handler+0x80>
		}else if(counter == (STK_RequiredOnTime+STK_RequiredOffTime))
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <SysTick_Handler+0xa8>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <SysTick_Handler+0xac>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	441a      	add	r2, r3
 8000b24:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <SysTick_Handler+0xa4>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d105      	bne.n	8000b38 <SysTick_Handler+0x80>
		{
			STK_pAppFun();
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <SysTick_Handler+0xa0>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4798      	blx	r3
			counter=0;
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <SysTick_Handler+0xa4>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
		}
	}

	G_u8ReadFlag = GET_BIT(STK->CTRL,16U);
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <SysTick_Handler+0x9c>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	0c1b      	lsrs	r3, r3, #16
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	f003 0301 	and.w	r3, r3, #1
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <SysTick_Handler+0xb0>)
 8000b48:	701a      	strb	r2, [r3, #0]
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000034 	.word	0x20000034
 8000b54:	e000e010 	.word	0xe000e010
 8000b58:	20000030 	.word	0x20000030
 8000b5c:	20000038 	.word	0x20000038
 8000b60:	20000028 	.word	0x20000028
 8000b64:	2000002c 	.word	0x2000002c
 8000b68:	20000035 	.word	0x20000035

08000b6c <main>:
#include "main.h"
U8 Key_Flag =0;
U8 i=0;

int main(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	MRCC_vInitSystemClock();
 8000b70:	f7ff ff00 	bl	8000974 <MRCC_vInitSystemClock>
	STK_Init(STK_CLK_SRC_HCLK_Div8);
 8000b74:	2001      	movs	r0, #1
 8000b76:	f7ff ff77 	bl	8000a68 <STK_Init>
	MRCC_vEnableBusClock(Bus_AHB1, PHB1_GPIOA);
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f7ff ff27 	bl	80009d0 <MRCC_vEnableBusClock>
	//HLCD_WriteCharacter('O');
	//HLCD_WriteCharacter('R');

	//HLCD_WriteString((U8*)"Hello");

	LCD_vInitPinMode();
 8000b82:	f7ff fb52 	bl	800022a <LCD_vInitPinMode>
	LCD_Init();
 8000b86:	f7ff fc75 	bl	8000474 <LCD_Init>
	LCD_WriteData('A');
 8000b8a:	2041      	movs	r0, #65	; 0x41
 8000b8c:	f7ff fbf1 	bl	8000372 <LCD_WriteData>

	while(1)
 8000b90:	e7fe      	b.n	8000b90 <main+0x24>
	...

08000b94 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b94:	480d      	ldr	r0, [pc, #52]	; (8000bcc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b96:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b98:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b9c:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b9e:	490d      	ldr	r1, [pc, #52]	; (8000bd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ba0:	4a0d      	ldr	r2, [pc, #52]	; (8000bd8 <LoopForever+0xe>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba4:	e002      	b.n	8000bac <LoopCopyDataInit>

08000ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000baa:	3304      	adds	r3, #4

08000bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb0:	d3f9      	bcc.n	8000ba6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bb4:	4c0a      	ldr	r4, [pc, #40]	; (8000be0 <LoopForever+0x16>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb8:	e001      	b.n	8000bbe <LoopFillZerobss>

08000bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bbc:	3204      	adds	r2, #4

08000bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc0:	d3fb      	bcc.n	8000bba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bc2:	f000 f811 	bl	8000be8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bc6:	f7ff ffd1 	bl	8000b6c <main>

08000bca <LoopForever>:

LoopForever:
    b LoopForever
 8000bca:	e7fe      	b.n	8000bca <LoopForever>
  ldr   r0, =_estack
 8000bcc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000bd8:	08000c50 	.word	0x08000c50
  ldr r2, =_sbss
 8000bdc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000be0:	2000003c 	.word	0x2000003c

08000be4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000be4:	e7fe      	b.n	8000be4 <ADC_IRQHandler>
	...

08000be8 <__libc_init_array>:
 8000be8:	b570      	push	{r4, r5, r6, lr}
 8000bea:	4d0d      	ldr	r5, [pc, #52]	; (8000c20 <__libc_init_array+0x38>)
 8000bec:	4c0d      	ldr	r4, [pc, #52]	; (8000c24 <__libc_init_array+0x3c>)
 8000bee:	1b64      	subs	r4, r4, r5
 8000bf0:	10a4      	asrs	r4, r4, #2
 8000bf2:	2600      	movs	r6, #0
 8000bf4:	42a6      	cmp	r6, r4
 8000bf6:	d109      	bne.n	8000c0c <__libc_init_array+0x24>
 8000bf8:	4d0b      	ldr	r5, [pc, #44]	; (8000c28 <__libc_init_array+0x40>)
 8000bfa:	4c0c      	ldr	r4, [pc, #48]	; (8000c2c <__libc_init_array+0x44>)
 8000bfc:	f000 f818 	bl	8000c30 <_init>
 8000c00:	1b64      	subs	r4, r4, r5
 8000c02:	10a4      	asrs	r4, r4, #2
 8000c04:	2600      	movs	r6, #0
 8000c06:	42a6      	cmp	r6, r4
 8000c08:	d105      	bne.n	8000c16 <__libc_init_array+0x2e>
 8000c0a:	bd70      	pop	{r4, r5, r6, pc}
 8000c0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c10:	4798      	blx	r3
 8000c12:	3601      	adds	r6, #1
 8000c14:	e7ee      	b.n	8000bf4 <__libc_init_array+0xc>
 8000c16:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c1a:	4798      	blx	r3
 8000c1c:	3601      	adds	r6, #1
 8000c1e:	e7f2      	b.n	8000c06 <__libc_init_array+0x1e>
 8000c20:	08000c48 	.word	0x08000c48
 8000c24:	08000c48 	.word	0x08000c48
 8000c28:	08000c48 	.word	0x08000c48
 8000c2c:	08000c4c 	.word	0x08000c4c

08000c30 <_init>:
 8000c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c32:	bf00      	nop
 8000c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c36:	bc08      	pop	{r3}
 8000c38:	469e      	mov	lr, r3
 8000c3a:	4770      	bx	lr

08000c3c <_fini>:
 8000c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c3e:	bf00      	nop
 8000c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c42:	bc08      	pop	{r3}
 8000c44:	469e      	mov	lr, r3
 8000c46:	4770      	bx	lr
